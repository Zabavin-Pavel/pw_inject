"""
–ú–µ–Ω–µ–¥–∂–µ—Ä AHK - –£–ü–†–û–©–ï–ù–û: –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""
import subprocess
import logging
from pathlib import Path
import time

class AHKManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AutoHotkey —Å–∫—Ä–∏–ø—Ç–æ–º"""
    
    def __init__(self):
        self.process = None
        appdata_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        appdata_dir.mkdir(parents=True, exist_ok=True)
        self.command_file = appdata_dir / "ahk_command.txt"
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å AHK
        self._start_ahk()
    
    def _start_ahk(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        try:
            # –ü—É—Ç—å –∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É hotkeys.exe
            ahk_exe = Path(__file__).parent / "hotkeys.exe"
            
            if not ahk_exe.exists():
                logging.error(f"‚ùå AHK exe not found: {ahk_exe}")
                return False
            
            logging.info(f"üìÅ AHK exe: {ahk_exe}")
            logging.info(f"üìÅ Command file: {self.command_file}")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å AHK —Å –ø—É—Ç—ë–º –∫ command_file
            self.process = subprocess.Popen(
                [str(ahk_exe), str(self.command_file)],
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            logging.info(f"‚úÖ AHK started (PID: {self.process.pid})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(0.1)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start AHK: {e}")
            return False
    
    def send_command(self, command: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ AHK —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
        
        Args:
            command: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è AHK
        
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        """
        try:
            # –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª
            with open(self.command_file, 'w', encoding='utf-8') as f:
                f.write(command)
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to send AHK command '{command}': {e}")
            return False
    
    # === –ü–†–û–°–¢–´–ï –ö–û–ú–ê–ù–î–´ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    def click_at_mouse(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö"""
        return self.send_command("CLICK")
    
    def send_space(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Space –≤–æ –≤—Å–µ –æ–∫–Ω–∞"""
        return self.send_command("SPACE")
    
    def follow_lider(self):
        """Follow - –∫–ª–∏–∫ –≤–æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö –∫—Ä–æ–º–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
        return self.send_command("FOLLOW")
    
    def headhunter(self):
        """Headhunter - Tab + –∫–ª–∏–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ"""
        return self.send_command("HEADHUNTER")
    
    def send_key(self, key: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –≤–æ –≤—Å–µ –æ–∫–Ω–∞
        
        Args:
            key: –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (W, A, S, D, etc)
        """
        return self.send_command(f"KEY:{key}")
    
    def refresh_windows(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –≤ AHK"""
        logging.info("üîÑ AHK window refresh")
        return self.send_command("REFRESH")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        if self.process and self.process.poll() is None:
            try:
                self.send_command("EXIT")
                self.process.wait(timeout=2)
                logging.info("‚úÖ AHK stopped gracefully")
            except subprocess.TimeoutExpired:
                self.process.kill()
                logging.warning("‚ö†Ô∏è AHK killed forcefully")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Error stopping AHK: {e}")