"""
AHK Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AutoHotkey —Å–∫—Ä–∏–ø—Ç–æ–º
–û–ë–ù–û–í–õ–ï–ù–û: –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç PID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
"""
import subprocess
import logging
import time
from pathlib import Path
import shutil
import sys

class AHKManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AHK –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    def __init__(self):
        self.process = None
        self.command_file = None
        self.ahk_exe = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ hotkeys.exe
        self._setup_ahk_paths()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º AHK
        self.start()
    
    def _setup_ahk_paths(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç–∏ –∫ AHK —Ñ–∞–π–ª–∞–º"""
        # AppData –ø–∞–ø–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
        appdata_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        appdata_dir.mkdir(parents=True, exist_ok=True)
        
        self.command_file = appdata_dir / "ahk_command.txt"
        
        if getattr(sys, 'frozen', False):
            # Prod —Ä–µ–∂–∏–º - hotkeys.exe –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ AppData –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            self.ahk_exe = appdata_dir / "hotkeys.exe"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ hotkeys.exe –≤ AppData
            if not self.ahk_exe.exists():
                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ _internal/ahk/
                source = Path(sys._MEIPASS) / "ahk" / "hotkeys.exe"
                if source.exists():
                    shutil.copy2(source, self.ahk_exe)
                    logging.info(f"‚úÖ hotkeys.exe —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {self.ahk_exe}")
                else:
                    logging.error(f"‚ùå hotkeys.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {source}")
        else:
            # Dev —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hotkeys.exe –∏–∑ ahk/
            self.ahk_exe = Path(__file__).parent / "hotkeys.exe"
        
        logging.info(f"üìÅ AHK exe: {self.ahk_exe}")
        logging.info(f"üìÅ Command file: {self.command_file}")
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        if not self.ahk_exe or not self.ahk_exe.exists():
            logging.error(f"‚ùå AHK executable not found: {self.ahk_exe}")
            return False
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥
            if self.command_file.exists():
                self.command_file.unlink()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AHK —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º command_file
            self.process = subprocess.Popen(
                [str(self.ahk_exe), str(self.command_file)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            logging.info(f"‚úÖ AHK started (PID: {self.process.pid})")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start AHK: {e}")
            return False
    
    def send_command(self, command: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É AHK —Å–∫—Ä–∏–ø—Ç—É
        
        Args:
            command: —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        
        Returns:
            bool: —É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not self.process or self.process.poll() is not None:
            logging.warning("‚ö†Ô∏è AHK process not running, restarting...")
            self.start()
            time.sleep(0.1)
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª
            self.command_file.write_text(command, encoding='utf-8')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(0.05)
            
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to send command: {e}")
            return False
    
    def click_at_mouse(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –≤–æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏"""
        return self.send_command("CLICK")
    
    def send_key(self, key: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –≤–æ –≤—Å–µ –æ–∫–Ω–∞"""
        return self.send_command(f"KEY:{key}")

    def send_key_to_pid(self, key: str, pid: int):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–∫–Ω—É –ø–æ PID
        
        Args:
            key: –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            pid: PID –æ–∫–Ω–∞
        """
        return self.send_command(f"KEY:{key}:{pid}")
    
    def send_key_to_pids(self, key: str, pids: list):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –æ–∫–Ω–∞–º
        
        Args:
            key: –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            pids: —Å–ø–∏—Å–æ–∫ PID
        """
        pids_str = ",".join(str(p) for p in pids)
        return self.send_command(f"KEY:{key}:{pids_str}")
    
    def headhunter(self, pid: int):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å Headhunter –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ PID
        
        Args:
            pid: PID –æ–∫–Ω–∞
        """
        return self.send_command(f"HEADHUNTER:{pid}")
    
    def follow_lider(self, pids: list):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å Follow Lider –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–∫–æ–Ω
        
        Args:
            pids: —Å–ø–∏—Å–æ–∫ PID
        """
        pids_str = ",".join(str(p) for p in pids)
        return self.send_command(f"FOLLOW_LIDER:{pids_str}")
    
    def refresh_windows(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –≤ AHK (—É—Å—Ç–∞—Ä–µ–ª–æ, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        logging.info("üîÑ AHK window refresh (no-op)")
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        if self.process and self.process.poll() is None:
            try:
                self.send_command("EXIT")
                self.process.wait(timeout=2)
                logging.info("‚úÖ AHK stopped gracefully")
            except subprocess.TimeoutExpired:
                self.process.kill()
                logging.warning("‚ö†Ô∏è AHK killed forcefully")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Error stopping AHK: {e}")