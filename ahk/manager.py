"""
–ú–µ–Ω–µ–¥–∂–µ—Ä AHK - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç hotkeys.exe
–û–ë–ù–û–í–õ–ï–ù–û: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ hotkeys.exe –ø–æ —Ö–µ—à-—Å—É–º–º–µ
"""
import subprocess
import sys
import time
import atexit
import logging
import hashlib
from pathlib import Path
import shutil

class AHKManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º AHK –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
    
    def __init__(self):
        # AppData –ø–∞–ø–∫–∞ (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
        self.appdata_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        self.appdata_dir.mkdir(parents=True, exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
        if getattr(sys, 'frozen', False):
            # === –£–ü–ê–ö–û–í–ê–ù –í EXE ===
            temp_dir = Path(sys._MEIPASS)
            bundled_ahk = temp_dir / "ahk" / "hotkeys.exe"
            
            if not bundled_ahk.exists():
                logging.error(f"‚ùå Bundled hotkeys.exe not found at {bundled_ahk}")
                bundled_ahk = None
        else:
            # === –†–ê–ó–†–ê–ë–û–¢–ö–ê (–∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤) ===
            base_path = Path(__file__).parent.parent
            bundled_ahk = base_path / "ahk" / "hotkeys.exe"
            
            if not bundled_ahk.exists():
                logging.warning(f"‚ö†Ô∏è hotkeys.exe not found at {bundled_ahk}")
                bundled_ahk = None
        
        # hotkeys.exe –≤ AppData (–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        self.ahk_exe = self.appdata_dir / "hotkeys.exe"
        
        # ahk_command.txt –≤ AppData (writable)
        self.command_file = self.appdata_dir / "ahk_command.txt"
        
        # === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û –•–ï–®–£ ===
        if bundled_ahk:
            self._update_hotkeys_if_needed(bundled_ahk)
        
        self.process = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º AHK –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.start()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self.stop)
    
    def _calculate_file_hash(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å SHA256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        sha256 = hashlib.sha256()
        
        try:
            with open(file_path, 'rb') as f:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                while chunk := f.read(8192):
                    sha256.update(chunk)
            
            return sha256.hexdigest()
        except Exception as e:
            logging.error(f"‚ùå Failed to calculate hash for {file_path}: {e}")
            return ""
    
    def _update_hotkeys_if_needed(self, bundled_ahk: Path):
        """
        –û–±–Ω–æ–≤–∏—Ç—å hotkeys.exe –≤ AppData –µ—Å–ª–∏ —Ö–µ—à –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        
        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ AppData –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∫–æ–ø–∏—Ä—É–µ–º
        2. –ï—Å–ª–∏ —Ö–µ—à–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        3. –ï—Å–ª–∏ —Ö–µ—à–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        """
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à bundled –≤–µ—Ä—Å–∏–∏
        bundled_hash = self._calculate_file_hash(bundled_ahk)
        
        if not bundled_hash:
            logging.error("‚ùå Cannot calculate bundled hotkeys.exe hash")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ AppData
        if not self.ahk_exe.exists():
            # –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∫–æ–ø–∏—Ä—É–µ–º
            try:
                shutil.copy(bundled_ahk, self.ahk_exe)
                logging.info(f"‚úÖ Installed hotkeys.exe to {self.ahk_exe}")
                logging.info(f"   Hash: {bundled_hash[:16]}...")
            except Exception as e:
                logging.error(f"‚ùå Failed to install hotkeys.exe: {e}")
            return
        
        # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
        appdata_hash = self._calculate_file_hash(self.ahk_exe)
        
        if bundled_hash != appdata_hash:
            # –•–µ—à–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
                if self.process and self.process.poll() is None:
                    try:
                        self.process.kill()
                        self.process.wait(timeout=1)
                    except:
                        pass
                
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                shutil.copy(bundled_ahk, self.ahk_exe)
                logging.info(f"üîÑ Updated hotkeys.exe in {self.ahk_exe}")
                logging.info(f"   Old hash: {appdata_hash[:16]}...")
                logging.info(f"   New hash: {bundled_hash[:16]}...")
            except Exception as e:
                logging.error(f"‚ùå Failed to update hotkeys.exe: {e}")
        else:
            # –•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            logging.info(f"‚úÖ hotkeys.exe is up to date")
            logging.info(f"   Hash: {bundled_hash[:16]}...")
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        if not self.ahk_exe.exists():
            logging.error(f"‚ùå AHK not found: {self.ahk_exe}")
            return False
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if self.command_file.exists():
            try:
                self.command_file.unlink()
            except:
                pass
        
        try:
            # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ command_file –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
            self.process = subprocess.Popen(
                [str(self.ahk_exe), str(self.command_file)],
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            logging.info(f"‚úÖ AHK started (PID: {self.process.pid})")
            logging.info(f"üìù Command file: {self.command_file}")
            
            # –î–∞—ë–º AHK –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            time.sleep(0.5)
            
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to start AHK: {e}")
            return False
    
    def send_command(self, command: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ AHK"""
        if not self.process or self.process.poll() is not None:
            logging.warning("‚ö†Ô∏è AHK not running, restarting...")
            self.start()
            time.sleep(0.5)
        
        try:
            # –ñ–¥—ë–º –ø–æ–∫–∞ —Ñ–∞–π–ª –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è
            max_wait = 0.5
            wait_step = 0.05
            waited = 0
            
            while self.command_file.exists() and waited < max_wait:
                time.sleep(wait_step)
                waited += wait_step
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª
            self.command_file.write_text(command, encoding='utf-8')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(0.05)
            
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to send command: {e}")
            return False
    
    def click_at_mouse(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –≤–æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏"""
        return self.send_command("CLICK")
    
    def send_key(self, key: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –≤–æ –≤—Å–µ –æ–∫–Ω–∞"""
        return self.send_command(f"KEY:{key}")

    def send_key_to_pid(self, key: str, pid: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–∫–Ω—É –ø–æ PID"""
        return self.send_command(f"KEY_PID:{key}:{pid}")
    
    def headhunter(self, pid: int):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Headhunter –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ PID"""
        return self.send_command(f"HEADHUNTER:{pid}")
    
    def follow_lider(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Follow Lider –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        return self.send_command("FOLLOW_LIDER")
    
    def refresh_windows(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –≤ AHK"""
        logging.info("üîÑ Refreshing AHK window list")
        return self.send_command("REFRESH")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        if self.process and self.process.poll() is None:
            try:
                self.send_command("EXIT")
                self.process.wait(timeout=2)
                logging.info("‚úÖ AHK stopped gracefully")
            except subprocess.TimeoutExpired:
                self.process.kill()
                logging.warning("‚ö†Ô∏è AHK killed forcefully")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Error stopping AHK: {e}")