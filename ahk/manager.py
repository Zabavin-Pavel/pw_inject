"""
–ú–µ–Ω–µ–¥–∂–µ—Ä AHK - –û–ë–ù–û–í–õ–ï–ù–û: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ settings.ini –≤ AppData
"""
import subprocess
import logging
from pathlib import Path
import time
import sys
import shutil
import hashlib

class AHKManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AutoHotkey —Å–∫—Ä–∏–ø—Ç–æ–º"""
    
    def __init__(self):
        self.process = None
        self.appdata_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        self.appdata_dir.mkdir(parents=True, exist_ok=True)
        self.command_file = self.appdata_dir / "ahk_command.txt"
        
        # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ bundle –≤ AppData –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self._ensure_files_in_appdata()
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å AHK
        self._start_ahk()
    
    def _ensure_files_in_appdata(self):
        """
        –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å hotkeys.exe –∏ settings.ini –∏–∑ bundle –≤ AppData
        
        - hotkeys.exe: –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –í–°–ï–ì–î–ê –µ—Å–ª–∏ —Ö–µ—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        - settings.ini: –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ bundle
        if getattr(sys, 'frozen', False):
            # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π EXE
            bundle_dir = Path(sys._MEIPASS) / "ahk"
        else:
            # Dev —Ä–µ–∂–∏–º
            bundle_dir = Path(__file__).parent
        
        # === HOTKEYS.EXE (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ö–µ—à–∞) ===
        source_exe = bundle_dir / "hotkeys.exe"
        target_exe = self.appdata_dir / "hotkeys.exe"
        
        if not source_exe.exists():
            logging.error(f"‚ùå Source hotkeys.exe not found: {source_exe}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
        should_copy_exe = True
        
        if target_exe.exists():
            source_hash = self._compute_file_hash(source_exe)
            target_hash = self._compute_file_hash(target_exe)
            
            if source_hash == target_hash:
                should_copy_exe = False
                logging.info(f"‚úÖ hotkeys.exe hash match, skip copy")
            else:
                logging.info(f"‚ö†Ô∏è hotkeys.exe hash mismatch, updating...")
        
        if should_copy_exe:
            try:
                shutil.copy2(source_exe, target_exe)
                logging.info(f"‚úÖ hotkeys.exe copied to {target_exe}")
            except Exception as e:
                logging.error(f"‚ùå Failed to copy hotkeys.exe: {e}")
        
        # === SETTINGS.INI (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) ===
        source_ini = bundle_dir / "settings.ini"
        target_ini = self.appdata_dir / "settings.ini"
        
        if not source_ini.exists():
            logging.warning(f"‚ö†Ô∏è Source settings.ini not found: {source_ini}")
            return
        
        if not target_ini.exists():
            try:
                shutil.copy2(source_ini, target_ini)
                logging.info(f"‚úÖ settings.ini copied to {target_ini}")
            except Exception as e:
                logging.error(f"‚ùå Failed to copy settings.ini: {e}")
        else:
            logging.info(f"‚ÑπÔ∏è settings.ini already exists, skip copy")
    
    def _compute_file_hash(self, filepath: Path) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å SHA256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        sha256 = hashlib.sha256()
        
        try:
            with open(filepath, 'rb') as f:
                while chunk := f.read(8192):
                    sha256.update(chunk)
            return sha256.hexdigest()
        except Exception as e:
            logging.error(f"Failed to compute hash for {filepath}: {e}")
            return ""
    
    def _start_ahk(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        try:
            # –ü—É—Ç—å –∫ hotkeys.exe –≤ AppData
            ahk_exe = self.appdata_dir / "hotkeys.exe"
            
            if not ahk_exe.exists():
                logging.error(f"‚ùå AHK exe not found: {ahk_exe}")
                return False
            
            logging.info(f"üìÅ AHK exe: {ahk_exe}")
            logging.info(f"üìÅ Command file: {self.command_file}")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å AHK —Å –ø—É—Ç—ë–º –∫ command_file
            self.process = subprocess.Popen(
                [str(ahk_exe), str(self.command_file)],
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            logging.info(f"‚úÖ AHK started (PID: {self.process.pid})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(0.1)
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start AHK: {e}")
            return False
    
    def send_command(self, command: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ AHK —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
        
        Args:
            command: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è AHK
        
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        """
        try:
            # –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∞–π–ª
            with open(self.command_file, 'w', encoding='utf-8') as f:
                f.write(command)
            
            return True
            
        except Exception as e:
            logging.error(f"Failed to send AHK command '{command}': {e}")
            return False
    
    # === –ü–†–û–°–¢–´–ï –ö–û–ú–ê–ù–î–´ –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    def click_at_mouse(self):
        """–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö"""
        return self.send_command("CLICK")
    
    def send_space(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Space –≤–æ –≤—Å–µ –æ–∫–Ω–∞"""
        return self.send_command("SPACE")
    
    def follow_leader(self):
        """Follow - –∫–ª–∏–∫ –≤–æ –≤—Å–µ—Ö –æ–∫–Ω–∞—Ö –∫—Ä–æ–º–µ –ª–∏–¥–µ—Ä–∞"""
        return self.send_command("FOLLOW")
    
    def start_headhunter(self):
        """Headhunter - Tab + –∫–ª–∏–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ"""
        return self.send_command("HEADHUNTER_START")
    
    def stop_headhunter(self):
        """Headhunter - Tab + –∫–ª–∏–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ"""
        return self.send_command("HEADHUNTER_STOP")
    
    def send_key(self, key: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏—à—É –≤–æ –≤—Å–µ –æ–∫–Ω–∞
        
        Args:
            key: –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (W, A, S, D, etc)
        """
        return self.send_command(f"KEY:{key}")
    
    def refresh_windows(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –≤ AHK"""
        logging.info("üîÑ AHK window refresh")
        return self.send_command("REFRESH")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –ø—Ä–æ—Ü–µ—Å—Å"""
        if self.process and self.process.poll() is None:
            try:
                self.send_command("EXIT")
                self.process.wait(timeout=2)
                logging.info("‚úÖ AHK stopped gracefully")
            except subprocess.TimeoutExpired:
                self.process.kill()
                logging.warning("‚ö†Ô∏è AHK killed forcefully")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Error stopping AHK: {e}")