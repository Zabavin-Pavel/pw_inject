"""
Toggle –¥–µ–π—Å—Ç–≤–∏—è (Follow, Attack, Headhunter)
"""
import logging
from core.keygen import PERMISSION_TRY, PERMISSION_PRO, PERMISSION_DEV

def register_toggle_actions(action_manager, multibox_manager, ahk_manager, app_state):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ toggle –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π
        multibox_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –º—É–ª—å—Ç–∏–±–æ–∫—Å–∞
        ahk_manager: –º–µ–Ω–µ–¥–∂–µ—Ä AHK
        app_state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    # === FOLLOW (TRY) ===
    def toggle_follow():
        """Toggle: –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞)"""
        is_active = app_state.is_action_active('follow')
        
        if is_active:
            print("Follow: STARTED")
        else:
            print("Follow: STOPPED")
            
            # –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –≤—Å–µ—Ö –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            for char in multibox_manager.get_all_characters():
                if char.fly_freeze_info and char.fly_freeze_info['active']:
                    char.memory.unfreeze_address(char.fly_freeze_info)
                    char.fly_freeze_info = None
                    char.char_base.set_fly_speed_z(0)
    
    action_manager.register(
        'follow',
        label='Follow',
        type='toggle',
        callback=toggle_follow,
        icon='üë£',
        has_hotkey=False,
        required_permission=PERMISSION_TRY
    )
    
    # === ATTACK (PRO) ===
    def toggle_attack():
        """Toggle: –ê—Ç–∞–∫–∞ (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ª–∏–¥–µ—Ä–∞)"""
        is_active = app_state.is_action_active('attack')
        
        if is_active:
            print("Attack: STARTED")
        else:
            print("Attack: STOPPED")
    
    action_manager.register(
        'attack',
        label='Attack',
        type='toggle',
        callback=toggle_attack,
        icon='‚öîÔ∏è',
        has_hotkey=False,
        required_permission=PERMISSION_PRO
    )
    
    # === HEADHUNTER (DEV) ===
    def toggle_headhunter():
        """Toggle: Headhunter (Tab + –õ–ö–ú –ø–æ 100, 100 –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)"""
        is_active = app_state.is_action_active('headhunter')
        
        active_char = app_state.last_active_character
        
        if is_active:
            if not active_char:
                print("Headhunter: No active character")
                app_state.toggle_action('headhunter')  # –í—ã–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                return
            
            print(f"Headhunter: STARTED for {active_char.char_base.char_name}")
        else:
            print("Headhunter: STOPPED")
    
    action_manager.register(
        'headhunter',
        label='Headhunter',
        type='toggle',
        callback=toggle_headhunter,
        icon='‚ò†',
        has_hotkey=False,
        required_permission=PERMISSION_DEV
    )


def follow_loop_callback(multibox_manager):
    """Callback –¥–ª—è Follow loop"""
    active_corrections = multibox_manager.follow_leader()
    if active_corrections > 0:
        logging.debug(f"Follow: {active_corrections} active corrections")


def attack_loop_callback(multibox_manager):
    """Callback –¥–ª—è Attack loop"""
    success_count = multibox_manager.set_attack_target()
    if success_count > 0:
        logging.debug(f"Attack: {success_count} targets set")


def headhunter_loop_callback(ahk_manager, app_state):
    """Callback –¥–ª—è Headhunter loop"""
    active_char = app_state.last_active_character
    
    if not active_char:
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º AHK —Ñ—É–Ω–∫—Ü–∏—é headhunter
    ahk_manager.headhunter(active_char.pid)