import logging
from core.keygen import PERMISSION_TRY, PERMISSION_PRO, PERMISSION_DEV

def register_toggle_actions(action_manager, multibox_manager, ahk_manager, app_state, main_window):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ toggle –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π
        multibox_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –º—É–ª—å—Ç–∏–±–æ–∫—Å–∞
        ahk_manager: –º–µ–Ω–µ–¥–∂–µ—Ä AHK
        app_state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        main_window: –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ loops)
    """
    
    # === FOLLOW (TRY) - –ò–°–ü–†–ê–í–õ–ï–ù–û ===
    def toggle_follow():
        """Toggle: –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
        is_active = app_state.is_action_active('follow')
        
        if is_active:
            print("Follow: STARTED")
            multibox_manager.start_follow_freeze()
            main_window._start_action_loop('follow', lambda: follow_loop_callback(multibox_manager))
        else:
            print("Follow: STOPPED")
            main_window._stop_action_loop('follow')
            multibox_manager.stop_follow_freeze()
    
    action_manager.register(
        'follow',
        label='Follow',
        type='toggle',
        callback=toggle_follow,
        icon='üë£',
        has_hotkey=False,
        required_permission=PERMISSION_TRY
    )
    
    # === ATTACK (PRO) - –ò–°–ü–†–ê–í–õ–ï–ù–û ===
    def toggle_attack():
        """Toggle: –ê—Ç–∞–∫–∞ (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ª–∏–¥–µ—Ä–∞)"""
        is_active = app_state.is_action_active('attack')
        
        if is_active:
            print("Attack: STARTED")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            main_window._start_action_loop('attack', lambda: attack_loop_callback(multibox_manager))
        else:
            print("Attack: STOPPED")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            main_window._stop_action_loop('attack')
    
    action_manager.register(
        'attack',
        label='Attack',
        type='toggle',
        callback=toggle_attack,
        icon='‚öîÔ∏è',
        has_hotkey=False,
        required_permission=PERMISSION_PRO
    )
    
    # === HEADHUNTER (DEV) - –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ–∏–∫—Å–∏—Ä—É–µ–º PID ===
    def toggle_headhunter():
        """Toggle: Headhunter (Tab + –õ–ö–ú –ø–æ 100, 100 –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)"""
        is_active = app_state.is_action_active('headhunter')
        active_char = app_state.last_active_character
        
        # –û–¢–õ–ê–î–ö–ê
        print(f"\n=== toggle_headhunter CALLED ===")
        print(f"  is_active: {is_active}")
        print(f"  active_char: {active_char.char_base.char_name if active_char else None}")
        print(f"  active_char.pid: {active_char.pid if active_char else None}")
        
        if is_active:
            if not active_char:
                print("Headhunter: No active character")
                app_state.toggle_action('headhunter')  # –í—ã–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                return
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            fixed_pid = active_char.pid
            
            print(f"Headhunter: STARTED for {active_char.char_base.char_name}")
            print(f"  Fixed PID: {fixed_pid}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PID –≤ callback
            main_window._start_action_loop('headhunter', lambda: headhunter_loop_callback(ahk_manager, fixed_pid))
        else:
            print("Headhunter: STOPPED")
            main_window._stop_action_loop('headhunter')

    action_manager.register(
        'headhunter',
        label='Headhunter',
        type='toggle',
        callback=toggle_headhunter,
        icon='‚ò†',
        has_hotkey=False,
        required_permission=PERMISSION_DEV
    )

def follow_loop_callback(multibox_manager):
    """Callback –¥–ª—è Follow loop (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 500ms)"""
    # print("üîç follow_loop_callback CALLED")
    active_corrections = multibox_manager.follow_leader()
    # print(f"üîç follow_loop_callback DONE, corrections={active_corrections}")

def attack_loop_callback(multibox_manager):
    """
    Callback –¥–ª—è Attack loop (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 500ms)
    """
    try:
        success_count = multibox_manager.set_attack_target()
        if success_count > 0:
            logging.debug(f"Attack: {success_count} targets set")
    except Exception as e:
        logging.error(f"Error in attack_loop_callback: {e}")

def headhunter_loop_callback(ahk_manager, fixed_pid):
    """
    Callback –¥–ª—è Headhunter loop (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 200ms)
    
    Args:
        ahk_manager: –º–µ–Ω–µ–¥–∂–µ—Ä AHK
        fixed_pid: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PID –æ–∫–Ω–∞ (–Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã)
    """
    try:
        # –û–¢–õ–ê–î–ö–ê: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–∞
        if not hasattr(headhunter_loop_callback, 'call_count'):
            headhunter_loop_callback.call_count = 0
        
        headhunter_loop_callback.call_count += 1
        if headhunter_loop_callback.call_count <= 3:
            print(f"  headhunter_loop #{headhunter_loop_callback.call_count}: Calling AHK with FIXED PID={fixed_pid}")
        
        # –í—ã–∑—ã–≤–∞–µ–º AHK —Ñ—É–Ω–∫—Ü–∏—é headhunter —Å –ó–ê–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú PID
        result = ahk_manager.headhunter(fixed_pid)
        
        if headhunter_loop_callback.call_count <= 3:
            print(f"  headhunter_loop #{headhunter_loop_callback.call_count}: AHK result={result}")
        
    except Exception as e:
        logging.error(f"Error in headhunter_loop_callback: {e}")
        print(f"‚ùå Error in headhunter_loop: {e}")
        
    except Exception as e:
        logging.error(f"Error in headhunter_loop_callback: {e}")
        print(f"‚ùå Error in headhunter_loop: {e}")