import logging
from core.keygen import PERMISSION_TRY, PERMISSION_PRO, PERMISSION_DEV

def register_toggle_actions(action_manager, multibox_manager, ahk_manager, app_state, main_window):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ toggle –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π
        multibox_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –º—É–ª—å—Ç–∏–±–æ–∫—Å–∞
        ahk_manager: –º–µ–Ω–µ–¥–∂–µ—Ä AHK
        app_state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        main_window: –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ loops)
    """
    
    # === FOLLOW (TRY) - –ò–°–ü–†–ê–í–õ–ï–ù–û ===
    def toggle_follow():
        """Toggle: –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
        is_active = app_state.is_action_active('follow')
        
        if is_active:
            print("Follow: STARTED")
            main_window._start_action_loop('follow', lambda: follow_loop_callback(multibox_manager))
        else:
            print("Follow: STOPPED")
            main_window._stop_action_loop('follow')

        # """Toggle: –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∑–∞–º–æ—Ä–æ–∑–∫–æ–π"""
        # is_active = app_state.is_action_active('follow')
        
        # if is_active:
        #     print("Follow: STARTED")
        #     main_window._start_action_loop('follow', lambda: follow_loop_callback(multibox_manager))
        # else:
        #     print("Follow: STOPPED")
        #     main_window._stop_action_loop('follow')
            
        #     # –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –≤—Å–µ—Ö
        #     for char in multibox_manager.get_all_characters():
        #         if hasattr(char, 'fly_freeze_info') and char.fly_freeze_info and char.fly_freeze_info.get('active'):
        #             char.memory.unfreeze_address(char.fly_freeze_info)
        #             char.fly_freeze_info = None
        #             char.char_base.set_fly_speed_z(0)
    
    action_manager.register(
        'follow',
        label='Follow',
        type='toggle',
        callback=toggle_follow,
        icon='üë£',
        has_hotkey=False,
        required_permission=PERMISSION_TRY
    )
    
    # === ATTACK (PRO) - –ò–°–ü–†–ê–í–õ–ï–ù–û ===
    def toggle_attack():
        """Toggle: –ê—Ç–∞–∫–∞ (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ª–∏–¥–µ—Ä–∞)"""
        is_active = app_state.is_action_active('attack')
        
        if is_active:
            print("Attack: STARTED")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            main_window._start_action_loop('attack', lambda: attack_loop_callback(multibox_manager))
        else:
            print("Attack: STOPPED")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            main_window._stop_action_loop('attack')
    
    action_manager.register(
        'attack',
        label='Attack',
        type='toggle',
        callback=toggle_attack,
        icon='‚öîÔ∏è',
        has_hotkey=False,
        required_permission=PERMISSION_PRO
    )
    
    # === HEADHUNTER (DEV) - –ò–°–ü–†–ê–í–õ–ï–ù–û ===
    def toggle_headhunter():
        """Toggle: Headhunter (Tab + –õ–ö–ú –ø–æ 100, 100 –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞)"""
        is_active = app_state.is_action_active('headhunter')
        
        active_char = app_state.last_active_character
        
        if is_active:
            if not active_char:
                print("Headhunter: No active character")
                app_state.toggle_action('headhunter')  # –í—ã–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                return
            
            print(f"Headhunter: STARTED for {active_char.char_base.char_name}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            main_window._start_action_loop('headhunter', lambda: headhunter_loop_callback(ahk_manager, app_state))
        else:
            print("Headhunter: STOPPED")
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            main_window._stop_action_loop('headhunter')
    
    action_manager.register(
        'headhunter',
        label='Headhunter',
        type='toggle',
        callback=toggle_headhunter,
        icon='‚ò†',
        has_hotkey=False,
        required_permission=PERMISSION_DEV
    )

def follow_loop_callback(multibox_manager):
    """Callback –¥–ª—è Follow loop (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 500ms)"""
    print("üîç follow_loop_callback CALLED")
    active_corrections = multibox_manager.follow_leader()
    print(f"üîç follow_loop_callback DONE, corrections={active_corrections}")

def attack_loop_callback(multibox_manager):
    """
    Callback –¥–ª—è Attack loop (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 500ms)
    """
    try:
        success_count = multibox_manager.set_attack_target()
        if success_count > 0:
            logging.debug(f"Attack: {success_count} targets set")
    except Exception as e:
        logging.error(f"Error in attack_loop_callback: {e}")


def headhunter_loop_callback(ahk_manager, app_state):
    """
    Callback –¥–ª—è Headhunter loop (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 200ms)
    """
    try:
        active_char = app_state.last_active_character
        
        if not active_char:
            return
        
        # –í—ã–∑—ã–≤–∞–µ–º AHK —Ñ—É–Ω–∫—Ü–∏—é headhunter —Å PID
        ahk_manager.headhunter(active_char.pid)
    except Exception as e:
        logging.error(f"Error in headhunter_loop_callback: {e}")