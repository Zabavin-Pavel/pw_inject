"""
–ü–∞–Ω–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import tkinter as tk
from PIL import Image, ImageTk
import logging
import ctypes
from ctypes import wintypes
from gui.styles import *

class CharacterPanel(tk.Frame):
    """–ü–∞–Ω–µ–ª—å —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, parent, app_state, on_character_selected, on_character_toggled):
        super().__init__(parent, bg=COLOR_BG)
        
        self.app_state = app_state
        self.on_character_selected = on_character_selected
        self.on_character_toggled = on_character_toggled
        
        self.characters = []
        self.character_rows = {}
        self.class_icons = {}
        
        self._setup_ui()
    
    def _setup_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI"""
        self.characters_container = tk.Frame(self, bg=COLOR_BG)
        self.characters_container.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
    
    def set_characters(self, characters):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
        for widget in self.characters_container.winfo_children():
            widget.destroy()
        
        self.characters = characters
        self.character_rows.clear()
        
        # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        for character in characters:
            row = CharacterRow(
                self.characters_container,
                character,
                self.app_state,
                self._load_class_icons(character.char_base.char_class),
                self.on_character_selected,
                on_icon_clicked=self._on_icon_clicked
            )
            # –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ party_cache
            if hasattr(character, 'manager'):
                row.character.manager = character.manager

            row.pack(fill=tk.X, padx=2, pady=0)
            self.character_rows[character] = row
    
    def update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        for character, row in self.character_rows.items():
            row.update_display()
    
    def _on_icon_clicked(self, character):
        """–ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            pid = character.pid
            
            # –ü—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ EnumWindows
            user32 = ctypes.windll.user32
            
            found_hwnd = None
            
            def callback(hwnd, lParam):
                nonlocal found_hwnd
                
                if user32.IsWindowVisible(hwnd):
                    # –ü–æ–ª—É—á–∏—Ç—å PID –æ–∫–Ω–∞
                    process_id = wintypes.DWORD()
                    user32.GetWindowThreadProcessId(hwnd, ctypes.byref(process_id))
                    
                    if process_id.value == pid:
                        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
                        length = user32.GetWindowTextLengthW(hwnd)
                        if length > 0:
                            buff = ctypes.create_unicode_buffer(length + 1)
                            user32.GetWindowTextW(hwnd, buff, length + 1)
                            
                            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç—Ç–æ –æ–∫–Ω–æ –∏–≥—Ä—ã (–µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                            if buff.value:
                                found_hwnd = hwnd
                                return False  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ
                
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            
            # –°–æ–∑–¥–∞—Ç—å callback
            EnumWindowsProc = ctypes.WINFUNCTYPE(wintypes.BOOL, wintypes.HWND, wintypes.LPARAM)
            enum_proc = EnumWindowsProc(callback)
            
            # –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –æ–∫–Ω–∞
            user32.EnumWindows(enum_proc, 0)
            
            if found_hwnd:
                # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ
                # SW_RESTORE = 9
                user32.ShowWindow(found_hwnd, 9)
                user32.SetForegroundWindow(found_hwnd)
                
                logging.info(f"Activated window for character {character.char_base.char_name} (HWND: {found_hwnd})")
            else:
                logging.warning(f"Window not found for PID {pid}")
                
        except Exception as e:
            logging.error(f"Failed to activate window: {e}", exc_info=True)
    
    def _load_class_icons(self, class_id: int):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–ª–∞—Å—Å–∞ (—Ü–≤–µ—Ç–Ω—É—é –∏ —Å–µ—Ä—É—é)"""
        if class_id in self.class_icons:
            return self.class_icons[class_id]
        
        try:
            icon_path = f"{ICONS_PATH}/{class_id}.png"
            image = Image.open(icon_path)
            image = image.resize((ICON_SIZE, ICON_SIZE), Image.Resampling.LANCZOS)
            
            # –¶–≤–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
            color_photo = ImageTk.PhotoImage(image)
            
            # –°–µ—Ä–∞—è –≤–µ—Ä—Å–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º)
            gray_image = image.convert('L')
            gray_photo = ImageTk.PhotoImage(gray_image)
            
            self.class_icons[class_id] = (color_photo, gray_photo)
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ {class_id}")
            
            return (color_photo, gray_photo)
        
        except Exception as e:
            logging.warning(f"Failed to load class icon {class_id}: {e}")
            return (None, None)


class CharacterRow(tk.Frame):
    """–°—Ç—Ä–æ–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –∏–º–µ–Ω–µ–º"""
    
    def __init__(self, parent, character, app_state, icons, on_selected, on_icon_clicked):
        super().__init__(parent, bg=COLOR_BG, highlightthickness=0)
        
        self.character = character
        self.app_state = app_state
        self.color_icon, self.gray_icon = icons  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
        self.on_selected = on_selected
        self.on_icon_clicked = on_icon_clicked
        
        self.is_flashing = False
        self.flash_job = None
    
        # –ù–û–í–û–ï: –ö–µ—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–≤–µ—Ç –Ω–∏–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.last_nick_color = COLOR_TEXT
        
        # –ò–∫–æ–Ω–∫–∞ –∫–ª–∞—Å—Å–∞ (–í–°–ï–ì–î–ê –¶–í–ï–¢–ù–ê–Ø)
        if self.color_icon:
            self.icon_label = tk.Label(
                self,
                image=self.color_icon,
                bg=COLOR_BG,
                cursor="hand2"
            )
            self.icon_label.pack(side=tk.LEFT, padx=(2, 0))
            self.icon_label.bind("<Button-1>", lambda e: self._on_icon_click())
        
        # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–∫–Ω–∞)
        char_name = self.character.char_base.char_name
        display_name = char_name
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–≥–Ω–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –æ—Å–æ–±—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if any(keyword in char_name.lower() for keyword in ['fire', 'flame', 'inn', 'rin']):
            display_name = f"üî•{char_name}"

        if len(display_name) > MAX_NAME_LENGTH:
            display_name = display_name[:MAX_NAME_LENGTH-3] + "..."
        
        self.name_label = tk.Label(
            self,
            text=display_name,
            font=("Segoe UI", 9, "bold"),
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            anchor="w",
        )
        self.name_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.name_label.bind("<Button-1>", lambda e: self._on_name_click())
    
    def _on_icon_click(self):
        """–ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ"""
        self.on_icon_clicked(self.character)
        self.flash()
    
    def _on_name_click(self):
        """–ö–ª–∏–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ (–∫–∞–∫ –∏–∫–æ–Ω–∫–∞)"""
        self.on_icon_clicked(self.character)
        self.flash()
    
    def flash(self):
        """–ú–∏–≥–Ω—É—Ç—å –Ω–∏–∫–Ω–µ–π–º–æ–º (–∫–∞–∫ —ç–∫—à–µ–Ω—ã)"""
        if self.is_flashing:
            return
        
        self.is_flashing = True
        original_fg = self.name_label.cget('fg')
        
        # –ú–∏–≥–∞–µ–º: –∞–∫—Ü–µ–Ω—Ç -> –æ—Ä–∏–≥–∏–Ω–∞–ª -> –∞–∫—Ü–µ–Ω—Ç -> –æ—Ä–∏–≥–∏–Ω–∞–ª
        self.name_label.configure(fg=COLOR_ACCENT)
        self.flash_job = self.after(100, lambda: self.name_label.configure(fg=original_fg))
        self.flash_job = self.after(200, lambda: self.name_label.configure(fg=COLOR_ACCENT))
        self.flash_job = self.after(300, lambda: self._finish_flash(original_fg))
    
    def _finish_flash(self, original_fg):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ"""
        self.name_label.configure(fg=original_fg)
        self.is_flashing = False
    
    def update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ"""
        # –§–æ–Ω –í–°–ï–ì–î–ê –æ—Å—Ç–∞—ë—Ç—Å—è —Ç—ë–º–Ω—ã–º
        self.configure(bg=COLOR_BG)
        if hasattr(self, 'icon_label'):
            self.icon_label.configure(bg=COLOR_BG)
        self.name_label.configure(bg=COLOR_BG)
        
        # –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        new_fg = COLOR_TEXT  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–µ—à –≥—Ä—É–ø–ø—ã –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if hasattr(self.character, 'manager') and self.character.manager:
            party_cache = self.character.manager._get_party_cache()
            
            leader = party_cache.get('leader')
            members = party_cache.get('members', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if leader and self.character.char_base.char_id == leader.char_base.char_id:
                new_fg = COLOR_LEADER  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –ª–∏–¥–µ—Ä–∞
            elif any(m.char_base.char_id == self.character.char_base.char_id for m in members):
                new_fg = COLOR_MEMBER  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
            # –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏–¥–µ—Ä–∞ - –≤—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∂–µ–ª—Ç—ã–º
            elif not leader and self.app_state.last_active_character:
                if self.character.pid == self.app_state.last_active_character.pid:
                    new_fg = COLOR_LEADER  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
        self.name_label.configure(fg=new_fg)