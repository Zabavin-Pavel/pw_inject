"""
–ü–∞–Ω–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
"""
import tkinter as tk
from PIL import Image, ImageTk, ImageEnhance
import logging
from gui.styles import *

class CharacterPanel(tk.Frame):
    """–ü–∞–Ω–µ–ª—å —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, parent, app_state, on_character_selected, on_character_toggled):
        super().__init__(parent, bg=COLOR_BG)
        
        self.app_state = app_state
        self.on_character_selected = on_character_selected  # callback(character)
        self.on_character_toggled = on_character_toggled    # callback(character)
        
        self.characters = []  # –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        self.character_rows = {}  # {character: CharacterRow}
        self.class_icons = {}  # –ö–µ—à –∏–∫–æ–Ω–æ–∫ –∫–ª–∞—Å—Å–æ–≤ {class_id: (color, gray)}
        
        self._setup_ui()
    
    def _setup_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        self.characters_container = tk.Frame(self, bg=COLOR_BG)
        self.characters_container.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
    
    def set_characters(self, characters):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        
        Args:
            characters: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Character
        """
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏
        for widget in self.characters_container.winfo_children():
            widget.destroy()
        
        self.characters = characters
        self.character_rows.clear()
        
        # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        for character in characters:
            row = CharacterRow(
                self.characters_container,
                character,
                self.app_state,
                self._load_class_icons(character.char_base.char_class),
                self.on_character_selected,
                self.on_character_toggled
            )
            row.pack(fill=tk.X, padx=5, pady=2)
            self.character_rows[character] = row
    
    def update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        for character, row in self.character_rows.items():
            row.update_display()
    
    def _load_class_icons(self, class_id: int):
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–ª–∞—Å—Å–∞ (—Ü–≤–µ—Ç–Ω—É—é –∏ —Å–µ—Ä—É—é)
        
        Returns:
            (color_icon, gray_icon) tuple
        """
        if class_id in self.class_icons:
            return self.class_icons[class_id]
        
        try:
            icon_path = f"{ICONS_PATH}/{class_id}.png"
            image = Image.open(icon_path)
            image = image.resize((ICON_SIZE, ICON_SIZE), Image.Resampling.LANCZOS)
            
            # –¶–≤–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
            color_photo = ImageTk.PhotoImage(image)
            
            # –°–µ—Ä–∞—è –≤–µ—Ä—Å–∏—è (grayscale)
            gray_image = image.convert('L')
            gray_photo = ImageTk.PhotoImage(gray_image)
            
            self.class_icons[class_id] = (color_photo, gray_photo)
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ {class_id}")
            
            return (color_photo, gray_photo)
        
        except Exception as e:
            logging.warning(f"Failed to load class icon {class_id}: {e}")
            return (None, None)


class CharacterRow(tk.Frame):
    """–°—Ç—Ä–æ–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self, parent, character, app_state, icons, on_selected, on_toggled):
        super().__init__(parent, bg=COLOR_BG, cursor="hand2")
        
        self.character = character
        self.app_state = app_state
        self.color_icon, self.gray_icon = icons
        self.on_selected = on_selected
        self.on_toggled = on_toggled
        
        self._setup_ui()
        self.update_display()
    
    def _setup_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI —Å—Ç—Ä–æ–∫–∏"""
        # –ß–µ–∫–±–æ–∫—Å (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
        self.checkbox_var = tk.BooleanVar(value=False)
        self.checkbox = tk.Checkbutton(
            self,
            variable=self.checkbox_var,
            bg=COLOR_BG,
            activebackground=COLOR_BG,
            selectcolor=COLOR_BG,
            highlightthickness=0,
            bd=0,
            command=self._on_checkbox_clicked
        )
        self.checkbox.pack(side=tk.LEFT, padx=(5, 2))
        
        # –ò–∫–æ–Ω–∫–∞ –∫–ª–∞—Å—Å–∞
        if self.color_icon:
            self.icon_label = tk.Label(
                self,
                image=self.color_icon,
                bg=COLOR_BG,
                cursor="hand2"
            )
            self.icon_label.pack(side=tk.LEFT, padx=(0, 5))
            self.icon_label.bind("<Button-1>", self._on_row_clicked)
        
        # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        char_name = self.character.char_base.char_name
        display_name = char_name
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–≥–Ω–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –æ—Å–æ–±—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        if any(keyword in char_name.lower() for keyword in ['fire', 'flame', 'inn', 'rin']):
            display_name = f"üî•{char_name}"
        
        if len(display_name) > MAX_NAME_LENGTH:
            display_name = display_name[:MAX_NAME_LENGTH-3] + "..."
        
        self.name_label = tk.Label(
            self,
            text=display_name,
            font=FONT_MAIN,
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            anchor="w"
        )
        self.name_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.name_label.bind("<Button-1>", self._on_row_clicked)
        
        # –ö–ª–∏–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
        self.bind("<Button-1>", self._on_row_clicked)
    
    def _on_row_clicked(self, event=None):
        """–ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ - –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        self.on_selected(self.character)
    
    def _on_checkbox_clicked(self):
        """–ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.on_toggled(self.character)
    
    def update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ (–æ—Ä–∞–Ω–∂–µ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞)
        is_selected = self.app_state.selected_character == self.character
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ (—á–µ–∫–±–æ–∫—Å)
        is_active = self.app_state.is_character_active(self.character)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω
        bg_color = COLOR_SELECTED if is_selected else COLOR_BG
        self.configure(bg=bg_color)
        self.checkbox.configure(bg=bg_color, activebackground=bg_color, selectcolor=bg_color)
        if hasattr(self, 'icon_label'):
            self.icon_label.configure(bg=bg_color)
        self.name_label.configure(bg=bg_color)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (–±–µ–ª—ã–π –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω, –∏–Ω–∞—á–µ —Å–µ—Ä—ã–π)
        text_color = COLOR_TEXT_BRIGHT if is_selected else COLOR_TEXT
        self.name_label.configure(fg=text_color)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å
        self.checkbox_var.set(is_active)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É (—Ü–≤–µ—Ç–Ω–∞—è –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞, —Å–µ—Ä–∞—è –µ—Å–ª–∏ –Ω–µ—Ç)
        if hasattr(self, 'icon_label'):
            if is_active:
                self.icon_label.configure(image=self.color_icon)
            else:
                self.icon_label.configure(image=self.gray_icon)