"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import tkinter as tk
from PIL import Image, ImageTk
import logging
import sys
import pystray
from pystray import MenuItem as item
import threading

from gui.styles import *
from gui.character_panel import CharacterPanel
from gui.hotkey_panel import HotkeyPanel
from core import AppState, ActionManager, HotkeyManager, LicenseManager
from license_manager import LicenseConfig
from keygen import PERMISSION_NONE, PERMISSION_TRY, PERMISSION_PRO, PERMISSION_DEV
from ahk_manager import AHKManager

class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
    
    def __init__(self, multibox_manager, settings_manager):
        self.manager = multibox_manager
        self.settings_manager = settings_manager
        
        # –ù–û–í–û–ï: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π (license.ini)
        self.license_config = LicenseConfig()
        
        # –ù–û–í–û–ï: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ UI)
        self.prev_permission_level = PERMISSION_NONE
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app_state = AppState()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.action_manager = ActionManager(self.app_state)
        self.hotkey_manager = HotkeyManager(
            self.action_manager,
            on_hotkey_executed=self._on_hotkey_flash
        )
        
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—ë–º AHK –º–µ–Ω–µ–¥–∂–µ—Ä –î–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
        from ahk_manager import AHKManager
        self.ahk_manager = AHKManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è (–ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è ahk_manager!)
        self._register_actions()
        
        # –°–æ–∑–¥–∞—Ç—å UI
        self._create_ui()
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç–∫–µ–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._load_hotkeys()
        
        # –°–æ–∑–¥–∞—Ç—å tray icon
        self._create_tray_icon()
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å topmost –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.is_topmost = self.settings_manager.is_topmost()
        self.root.attributes('-topmost', self.is_topmost)

        self.on_refresh()  # –ó–∞–¥–µ—Ä–∂–∫–∞ 500ms –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
    
    def _register_actions(self):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
        # Toggle –¥–µ–π—Å—Ç–≤–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–±–µ–∑ —Ö–æ—Ç–∫–µ–µ–≤)
        self.action_manager.register(
            'follow',
            label='Follow',
            type='toggle',
            callback=self.toggle_follow,
            icon='üë£',
            has_hotkey=False,
            required_permission=PERMISSION_TRY  # TRY
        )
        
        self.action_manager.register(
            'attack',
            label='Attack',
            type='toggle',
            callback=self.toggle_attack,
            icon='‚öîÔ∏è',
            has_hotkey=False,
            required_permission=PERMISSION_PRO  # PRO
        )
        
        self.action_manager.register(
            'teleport',
            label='Teleport',
            type='toggle',
            callback=self.toggle_teleport,
            icon='üåÄ',
            has_hotkey=False,
            required_permission=PERMISSION_DEV  # DEV
        )
        
        # Quick –¥–µ–π—Å—Ç–≤–∏—è —Å —Ö–æ—Ç–∫–µ—è–º–∏ (–±–µ–∑ –∏–∫–æ–Ω–æ–∫)
        self.action_manager.register(
            'teleport_to_target',
            label='Teleport to Target',
            type='quick',
            callback=self.action_teleport_to_target,
            has_hotkey=True,
            required_permission=PERMISSION_PRO  # PRO
        )
        
        self.action_manager.register(
            'show_all',
            label='Show All Characters',
            type='quick',
            callback=self.action_show_all,
            has_hotkey=True,
            required_permission=PERMISSION_TRY  # TRY
        )
        
        self.action_manager.register(
            'show_active',
            label='Show Active Characters',
            type='quick',
            callback=self.action_show_active,
            has_hotkey=True,
            required_permission=PERMISSION_TRY  # TRY
        )
        
        self.action_manager.register(
            'show_loot',
            label='Show Nearby Loot',
            type='quick',
            callback=self.action_show_loot,
            has_hotkey=True,
            required_permission=PERMISSION_PRO  # PRO
        )
        
        self.action_manager.register(
            'show_players',
            label='Show Nearby Players',
            type='quick',
            callback=self.action_show_players,
            has_hotkey=True,
            required_permission=PERMISSION_PRO  # PRO
        )
        
        self.action_manager.register(
            'show_npcs',
            label='Show Nearby NPC',
            type='quick',
            callback=self.action_show_npcs,
            has_hotkey=True,
            required_permission=PERMISSION_DEV  # DEV
        )
    
        # AHK —ç–∫—à–µ–Ω—ã
        self.action_manager.register(
            'ahk_click_mouse',
            label='AHK: Click at Mouse',
            type='quick',
            callback=self.ahk_manager.click_at_mouse,
            has_hotkey=True,
            required_permission=PERMISSION_TRY  # TRY
        )

        self.action_manager.register(
            'ahk_press_space',
            label='AHK: Press Space',
            type='quick',
            callback=lambda: self.ahk_manager.send_key("Space"),
            has_hotkey=True,
            required_permission=PERMISSION_TRY  # TRY
        )

    def _create_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI"""
        self.root = tk.Tk()
        self.root.title("Discord")
    
        # === –ó–ê–ì–†–£–ó–ò–¢–¨ –ü–û–ó–ò–¶–ò–Æ –ò–ó –ù–ê–°–¢–†–û–ï–ö ===
        pos = self.settings_manager.get_window_position()
        self.root.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}+{pos['x']}+{pos['y']}")
        
        self.root.configure(bg=COLOR_BG)
        
        # –£–±—Ä–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–º–∫—É –æ–∫–Ω–∞
        self.root.overrideredirect(True)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        
        # === TITLE BAR (–∫–∞—Å—Ç–æ–º–Ω–∞—è) ===
        self.title_bar = tk.Frame(self.root, bg=COLOR_BG, height=40)
        self.title_bar.pack(fill=tk.X, side=tk.TOP)
        self.title_bar.pack_propagate(False)
        
        # –ò–∫–æ–Ω–∫–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å–ª–µ–≤–∞)
        try:
            icon_image = Image.open(TRAY_ICON_PATH)
            icon_image = icon_image.resize((18, 18), Image.Resampling.LANCZOS)
            self.app_icon = ImageTk.PhotoImage(icon_image)
            icon_label = tk.Label(self.title_bar, image=self.app_icon, bg=COLOR_BG)
            icon_label.pack(side=tk.LEFT, padx=(10, 5))
        except:
            pass
        
        title_label = tk.Label(
            self.title_bar,
            text="Xvocmuk",
            font=FONT_TITLE,
            bg=COLOR_BG,
            fg=COLOR_TEXT
        )
        title_label.pack(side=tk.LEFT, padx=0)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º (–ò–°–ü–†–ê–í–õ–ï–ù–û - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å—Ç—É–ø—ã)
        # –ü–û–†–Ø–î–û–ö: Refresh, Pin, Minimize, Close

        # –ö–Ω–æ–ø–∫–∞ Close (–ß–ï–¢–í–Å–†–¢–ê–Ø)
        self.close_btn = tk.Label(
            self.title_bar,
            text="‚úï",
            font=("Segoe UI", 15, "bold"),  # –ñ–∏—Ä–Ω–µ–µ
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            width=2,
            height=1,
            anchor="center"
        )
        self.close_btn.pack(side=tk.RIGHT, padx=(0, 10))  # –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è
        self.close_btn.bind("<Button-1>", lambda e: self.on_close())
        self.close_btn.bind("<Enter>", lambda e: self.close_btn.configure(fg=COLOR_ACCENT))
        self.close_btn.bind("<Leave>", lambda e: self.close_btn.configure(fg=COLOR_TEXT))

        # –ö–Ω–æ–ø–∫–∞ Minimize (–¢–†–ï–¢–¨–Ø)
        self.minimize_btn = tk.Label(
            self.title_bar,
            text="‚àí",
            font=("Segoe UI", 15, "bold"),  # –ñ–∏—Ä–Ω–µ–µ
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            width=2,
            height=1,
            anchor="center"
        )
        self.minimize_btn.pack(side=tk.RIGHT, padx=0)
        self.minimize_btn.bind("<Button-1>", lambda e: self.minimize_to_tray())
        self.minimize_btn.bind("<Enter>", lambda e: self.minimize_btn.configure(fg=COLOR_ACCENT))
        self.minimize_btn.bind("<Leave>", lambda e: self.minimize_btn.configure(fg=COLOR_TEXT))

        # –ö–Ω–æ–ø–∫–∞ Pin (–í–¢–û–†–ê–Ø)
        self.pin_btn = tk.Label(
            self.title_bar,
            text="üìå",
            font=("Segoe UI", 13),  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä
            bg=COLOR_BG,
            fg=COLOR_TEXT if not self.settings_manager.is_topmost() else COLOR_ACCENT,
            cursor="hand2",
            width=2,
            height=1,
            anchor="center"
        )
        self.pin_btn.pack(side=tk.RIGHT, padx=0)
        self.pin_btn.bind("<Button-1>", lambda e: self.toggle_topmost())
        self.pin_btn.bind("<Enter>", lambda e: self.pin_btn.configure(fg=COLOR_ACCENT_HOVER))
        self.pin_btn.bind("<Leave>", lambda e: self.pin_btn.configure(
            fg=COLOR_ACCENT if self.is_topmost else COLOR_TEXT
        ))

        # –ö–Ω–æ–ø–∫–∞ Refresh (–ü–ï–†–í–ê–Ø)
        self.refresh_btn = tk.Label(
            self.title_bar,
            text="‚ü≥",
            font=("Segoe UI", 15, "bold"),  # –ñ–∏—Ä–Ω–µ–µ –∏ –∫—Ä—É–ø–Ω–µ–µ
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            width=3,
            height=1,
            anchor="center"
        )
        self.refresh_btn.pack(side=tk.RIGHT, padx=0)
        self.refresh_btn.bind("<Button-1>", lambda e: self.on_refresh())
        self.refresh_btn.bind("<Enter>", lambda e: self.refresh_btn.configure(fg=COLOR_ACCENT))
        self.refresh_btn.bind("<Leave>", lambda e: self.refresh_btn.configure(fg=COLOR_TEXT))
        
        # Drag window - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ title bar
        self.title_bar.bind("<Button-1>", self._start_drag)
        self.title_bar.bind("<B1-Motion>", self._do_drag)
        title_label.bind("<Button-1>", self._start_drag)
        title_label.bind("<B1-Motion>", self._do_drag)
        
        # === MAIN CONTENT ===
        content_frame = tk.Frame(self.root, bg=COLOR_BG)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=0)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –®–ò–†–ò–ù–ê + –†–ê–ú–ö–ê)
        left_container = tk.Frame(
            content_frame, 
            bg=COLOR_BG, 
            width=CHARACTERS_PANEL_WIDTH,
            highlightthickness=1,
            highlightbackground=COLOR_BORDER
        )
        left_container.pack(side=tk.LEFT, fill=tk.Y, expand=False, padx=(0, 10))
        left_container.pack_propagate(False)
        
        self.character_panel = CharacterPanel(
            left_container,
            self.app_state,
            on_character_selected=self.on_character_selected,
            on_character_toggled=self.on_character_toggled
        )
        self.character_panel.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: —Ö–æ—Ç–∫–µ–∏ + –∏–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–° –†–ê–ú–ö–û–ô)
        self.right_container = tk.Frame(
            content_frame,
            bg=COLOR_BG,
            highlightthickness=1,
            highlightbackground=COLOR_BORDER
        )
        self.right_container.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        self.hotkey_panel = HotkeyPanel(
            self.right_container,
            self.app_state,
            self.action_manager,
            self.hotkey_manager,
            self.settings_manager,
            on_action_executed=self.on_action_executed
        )
        self.hotkey_panel.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

    def _on_hotkey_flash(self, action_id: str):
        """Callback –¥–ª—è –º–∏–≥–∞–Ω–∏—è UI –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ö–æ—Ç–∫–µ—è"""
        # –í—ã–∑—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ GUI
        self.root.after(0, lambda: self.hotkey_panel.flash_action(action_id))

    def _setup_hotkey_flash(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ö–æ—Ç–∫–µ–µ–≤"""
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ—Ç–∫–µ–µ–≤
        original_handler = self.hotkey_manager._on_hotkey_pressed
        
        def new_handler(action_id: str):
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            self.action_manager.execute(action_id)
            
            # –ú–∏–≥–Ω—É—Ç—å –≤ UI
            self.hotkey_panel.flash_action(action_id)
        
        self.hotkey_manager._on_hotkey_pressed = new_handler
    
    def _start_drag(self, event):
        """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self._drag_start_x = event.x
        self._drag_start_y = event.y
    
    def _do_drag(self, event):
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        x = self.root.winfo_x() + event.x - self._drag_start_x
        y = self.root.winfo_y() + event.y - self._drag_start_y
        self.root.geometry(f"+{x}+{y}")
    
    def minimize_to_tray(self):
        """–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π"""
        self.root.withdraw()
    
    def toggle_topmost(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        self.is_topmost = not self.is_topmost
        
        self.settings_manager.set_topmost(self.is_topmost)
        self.root.attributes('-topmost', self.is_topmost)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
        self.pin_btn.configure(fg=COLOR_ACCENT if self.is_topmost else COLOR_TEXT)
    
    def _create_tray_icon(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ"""
        try:
            image = Image.open(TRAY_ICON_PATH)
            
            menu = pystray.Menu(
                item('Show', self._show_window, default=True),  # default=True !
                item('Always on Top', self._toggle_topmost_from_tray, 
                    checked=lambda item: self.settings_manager.is_topmost()),
                item('Exit', self._exit_from_tray)
            )
            
            self.tray_icon = pystray.Icon("pw_bot", image, "Xvocmuk", menu)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.tray_icon.run, daemon=True).start()
            
            logging.info("–ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logging.error(f"Failed to create tray icon: {e}")

    def _show_window(self, icon=None, item=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∏–∑ —Ç—Ä–µ—è"""
        self.root.after(0, lambda: self.root.deiconify())
        self.root.after(50, lambda: self.root.lift())
        self.root.after(100, lambda: self.root.focus_force())
    
    def _toggle_topmost_from_tray(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å topmost –∏–∑ —Ç—Ä–µ—è"""
        self.toggle_topmost()
    
    def _exit_from_tray(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ç—Ä–µ—è"""
        self.on_close()
    
    def _load_hotkeys(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç–∫–µ–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        hotkeys = self.settings_manager.get_hotkeys()
        
        for action_id, hotkey in hotkeys.items():
            if hotkey and hotkey != "-":
                try:
                    self.hotkey_manager.bind(hotkey, action_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç–∫–µ–π {hotkey}: {e}")
    
    def _save_hotkeys(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–æ—Ç–∫–µ–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        hotkeys = {}
        
        for action_id, action in self.action_manager.actions.items():
            if action.has_hotkey:
                hotkey = self.hotkey_manager.get_hotkey_for_action(action_id)
                hotkeys[action_id] = hotkey if hotkey else "-"
        
        self.settings_manager.set_hotkeys(hotkeys)
    
    def _flash_refresh_button(self):
        """–ú–∏–≥–Ω—É—Ç—å –∫–Ω–æ–ø–∫–æ–π Refresh"""
        self.refresh_btn.configure(fg=COLOR_ACCENT)
        self.root.after(200, lambda: self.refresh_btn.configure(fg=COLOR_TEXT))
    
    def on_refresh(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Refresh - –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô –ü–†–ò –ö–ê–ñ–î–û–ú –í–´–ó–û–í–ï"""
        # –ú–∏–≥–Ω—É—Ç—å –∫–Ω–æ–ø–∫–æ–π
        self._flash_refresh_button()
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –≤ AHK
        self.ahk_manager.refresh_windows()
        
        # === –®–ê–ì 1: –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø (–ö–ê–ñ–î–´–ô –†–ê–ó!) ===
        success, permission_level = LicenseManager.verify_best_license(self.license_config)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.verified = success
        self.app_state.permission_level = permission_level
        
        logging.info(f"üîê Verification: {success}, Permission: {permission_level}")
        
        # === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è—Ç—å UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è ===
        permission_changed = (permission_level != self.prev_permission_level)
        
        if permission_changed:
            logging.info(f"üîÑ Permission changed: {self.prev_permission_level} ‚Üí {permission_level}")
            self.prev_permission_level = permission_level
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å hotkey panel (–ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —ç–∫—à–µ–Ω—ã)
            self._rebuild_hotkey_panel()
        
        # === –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–°–û–ù–ê–ñ–ï–ô (–µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OK) ===
        if self.verified and permission_level != PERMISSION_NONE:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            self.manager.refresh_characters()
            characters = self.manager.get_valid_characters()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            self.character_panel.set_characters(characters)
        else:
            # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
            self.character_panel.set_characters([])
            
            logging.warning("‚ùå No valid license - access denied")
    
    def _rebuild_hotkey_panel(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å hotkey panel (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–∫—à–µ–Ω–æ–≤)"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π hotkey_panel
        self.hotkey_panel.destroy()
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π hotkey_panel
        self.hotkey_panel = HotkeyPanel(
            self.right_container,
            self.app_state,
            self.action_manager,
            self.hotkey_manager,
            self.settings_manager,
            on_action_executed=self.on_action_executed
        )
        self.hotkey_panel.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–æ—Ç–∫–µ–µ–≤
        self.root.after(100, lambda: self.hotkey_panel.update_hotkey_display())

    def on_character_selected(self, character):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - toggle –≤—ã–±–æ—Ä–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤—ã–±—Ä–∞–Ω - —Å–Ω—è—Ç—å –≤—ã–±–æ—Ä
        if self.app_state.selected_character == character:
            self.app_state.select_character(None)
        else:
            # –ò–Ω–∞—á–µ - –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ
            self.app_state.select_character(character)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.character_panel.update_display()
    
    def on_character_toggled(self, character):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—á–µ–∫–±–æ–∫—Å)"""
        pass
    
    def on_action_executed(self, action_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        self.action_manager.execute(action_id)
        
        # –ú–∏–≥–Ω—É—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ–º –≤ HotkeyPanel
        self.hotkey_panel.flash_action(action_id)
    

    def on_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK
            if hasattr(self, 'ahk_manager'):
                self.ahk_manager.stop()
                
            # –í–ê–ñ–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å keyboard hook
            if hasattr(self, 'hotkey_manager'):
                self.hotkey_manager.stop()
 
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
            x = self.root.winfo_x()
            y = self.root.winfo_y()
            self.settings_manager.set_window_position(x, y)
            
            # –ó–∞–∫—Ä—ã—Ç—å tray icon
            if self.tray_icon:
                self.tray_icon.stop()
            
            # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∞–º—è—Ç–∏
            for char in self.manager.characters.values():
                if hasattr(char, 'memory'):
                    char.memory.close()
            
            logging.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")
            
            self.root.quit()
            self.root.destroy()
            
        except Exception as e:
            logging.error(f"Error during shutdown: {e}")
            import sys
            sys.exit(0)

    # ============================================
    # –î–ï–ô–°–¢–í–ò–Ø (CALLBACKS)
    # ============================================
    
    def _start_action_loop(self, action_id: str, message: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)"""
        def loop():
            if self.app_state.is_action_active(action_id):
                print(message)
                # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –∏ –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
                self.action_timers[action_id] = self.root.after(1000, loop)
        
        loop()
    
    def _stop_action_loop(self, action_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥"""
        if action_id in self.action_timers:
            timer_id = self.action_timers[action_id]
            if timer_id:
                try:
                    self.root.after_cancel(timer_id)
                except:
                    pass
            self.action_timers[action_id] = None
    
    def toggle_follow(self):
        """Toggle: –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
        is_active = self.app_state.is_action_active('follow')
        
        if is_active:
            print("Follow: STARTED")
            self._start_action_loop('follow', "–°–õ–ï–î–£–Æ")
        else:
            print("Follow: STOPPED")
            self._stop_action_loop('follow')
        
        self.hotkey_panel.update_display()
    
    def toggle_attack(self):
        """Toggle: –ê—Ç–∞–∫–∞"""
        is_active = self.app_state.is_action_active('attack')
        
        if is_active:
            print("Attack: STARTED")
            self._start_action_loop('attack', "–ê–¢–ê–ö–£–Æ")
        else:
            print("Attack: STOPPED")
            self._stop_action_loop('attack')
        
        self.hotkey_panel.update_display()
    
    def toggle_teleport(self):
        """Toggle: –¢–µ–ª–µ–ø–æ—Ä—Ç"""
        is_active = self.app_state.is_action_active('teleport')
        
        if is_active:
            print("Teleport: STARTED")
            self._start_action_loop('teleport', "–¢–ï–õ–ï–ü–û–†–¢–ò–†–£–Æ–°–¨")
        else:
            print("Teleport: STOPPED")
            self._stop_action_loop('teleport')
        
        self.hotkey_panel.update_display()
    
    def action_teleport_to_target(self):
        """Action: –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫ —Ç–∞—Ä–≥–µ—Ç—É"""
        selected = self.app_state.selected_character
        
        if not selected:
            print("\n[Teleport to Target] –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            return
        
        success = self.manager.action_teleport_to_target(selected)
        
        if not success:
            char_name = selected.char_base.char_name
            print(f"[Teleport to Target] {char_name}: –ù–µ—É–¥–∞—á–∞ (–Ω–µ—Ç —Ç–∞—Ä–≥–µ—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏)\n")

    def action_show_all(self):
        """Action: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        characters = self.manager.get_all_characters()
        
        print("\n=== –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ ===")
        for char in characters:
            name = char.char_base.char_name
            char_id = char.char_base.char_id
            char_class = char.char_base.char_class
            print(f"  {name} (ID:{char_id}, Class:{char_class})")
        print(f"–í—Å–µ–≥–æ: {len(characters)}\n")
    
    def action_show_active(self):
        """Action: –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        active_chars = list(self.app_state.active_characters)
        
        print("\n=== –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ ===")
        for char in active_chars:
            name = char.char_base.char_name
            print(f"  {name}")
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_chars)}\n")
    
    def action_show_loot(self):
        """Action: –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—Ç –≤–æ–∫—Ä—É–≥"""
        selected = self.app_state.selected_character
        
        if selected:
            loot_ids = self.manager.get_nearby_loot(selected)
        else:
            loot_ids = self.manager.get_nearby_loot()
        
        print("\n=== –õ—É—Ç –≤–æ–∫—Ä—É–≥ ===")
        for loot_id in loot_ids:
            print(f"  –õ—É—Ç ID: {loot_id}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(loot_ids)}\n")
    
    def action_show_players(self):
        """Action: –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤–æ–∫—Ä—É–≥"""
        selected = self.app_state.selected_character
        
        if selected:
            player_ids = self.manager.get_nearby_players(selected)
        else:
            player_ids = self.manager.get_nearby_players()
        
        print("\n=== –û–∫—Ä—É–∂–∞—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ ===")
        for player_id in player_ids:
            print(f"  –ò–≥—Ä–æ–∫ ID: {player_id}")
        print(f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(player_ids)}\n")
    
    def action_show_npcs(self):
        """Action: –ü–æ–∫–∞–∑–∞—Ç—å NPC –≤–æ–∫—Ä—É–≥"""
        npc_ids = self.manager.get_nearby_npcs()
        
        print("\n=== –û–∫—Ä—É–∂–∞—é—â–∏–µ NPC ===")
        for npc_id in npc_ids:
            print(f"  NPC ID: {npc_id}")
        print(f"–í—Å–µ–≥–æ NPC: {len(npc_ids)}\n")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        self.root.mainloop()

    def start_instance_listener(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        import socket
        
        def listener():
            try:
                server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                server.bind(('127.0.0.1', 47200))
                server.listen(1)
                
                while True:
                    try:
                        client, addr = server.accept()
                        data = client.recv(1024)
                        
                        if data == b'SHOW_WINDOW':
                            # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            self.root.after(0, self._show_window)
                        
                        client.close()
                    except:
                        break
            except:
                pass
        
        threading.Thread(target=listener, daemon=True).start()