"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–û
–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ActionLimiter
"""
import tkinter as tk
from PIL import Image, ImageTk
import logging
import sys
import pystray
from pystray import MenuItem as item
import threading
import ctypes
from ctypes import wintypes
import math
from pathlib import Path

from gui.styles import *
from gui.character_panel import CharacterPanel
from gui.hotkey_panel import HotkeyPanel
from core import AppState, ActionManager, HotkeyManager, LicenseManager
from core.license import LicenseManager
from ahk.manager import AHKManager
from core.license_manager import LicenseConfig
from core.keygen import PERMISSION_NONE, PERMISSION_TRY, PERMISSION_PRO, PERMISSION_DEV
from core.action_limiter import ActionLimiter  # –ù–û–í–û–ï
from ahk.manager import AHKManager
from actions import (
    register_toggle_actions,
    register_try_actions,
    register_pro_actions,
    register_dev_actions,
    follow_loop_callback,
    attack_loop_callback,
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ toggle —ç–∫—à–µ–Ω–æ–≤
TOGGLE_ACTION_INTERVALS = {
    'follow': 500,      # 0.5 —Å–µ–∫—É–Ω–¥—ã
    'attack': 2000,      # 0.5 —Å–µ–∫—É–Ω–¥—ã  
    'headhunter': 200,  # 0.2 —Å–µ–∫—É–Ω–¥—ã
}

class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
    
    def __init__(self, multibox_manager, settings_manager):
        self.manager = multibox_manager
        self.settings_manager = settings_manager
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π (license.ini)
        self.license_config = LicenseConfig()
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ UI)
        self.prev_permission_level = PERMISSION_NONE
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app_state = AppState()
        
        # –ù–û–í–û–ï: ActionLimiter
        self.action_limiter = ActionLimiter()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.action_manager = ActionManager(self.app_state)
        self.hotkey_manager = HotkeyManager(
            self.action_manager,
            on_hotkey_executed=self._on_hotkey_flash
        )
        
        # AHK –º–µ–Ω–µ–¥–∂–µ—Ä
        self.ahk_manager = AHKManager()
        
        # –¢–∞–π–º–µ—Ä—ã –¥–ª—è toggle —ç–∫—à–µ–Ω–æ–≤
        self.action_timers = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è (–û–ë–ù–û–í–õ–ï–ù–û - –ø–µ—Ä–µ–¥–∞–µ–º action_limiter)
        self._register_actions()
        
        # –°–æ–∑–¥–∞—Ç—å UI
        self._create_ui()
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç–∫–µ–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._load_hotkeys()
        
        # –°–æ–∑–¥–∞—Ç—å tray icon
        self._create_tray_icon()
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å topmost –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.is_topmost = self.settings_manager.is_topmost()
        self.root.attributes('-topmost', self.is_topmost)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å polling –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self._start_active_window_polling()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ multibox_manager
        self.manager.set_ahk_manager(self.ahk_manager)
        self.manager.set_app_state(self.app_state)
        self.manager.set_action_limiter(self.action_limiter)

        # self.root.after(100, self.on_refresh)
        self.on_refresh()

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        self.root.after(2000, self._update_party_colors)

    def _register_actions(self):
            """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è (–û–ë–ù–û–í–õ–ï–ù–û)"""
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: Toggle –¥–µ–π—Å—Ç–≤–∏—è - –ø–µ—Ä–µ–¥–∞–µ–º self –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ _start_action_loop/_stop_action_loop
            register_toggle_actions(
                self.action_manager,
                self.manager,
                self.ahk_manager,
                self.app_state,
                self  # –ù–û–í–û–ï: –ø–µ—Ä–µ–¥–∞–µ–º main_window
            )
            
            # TRY —É—Ä–æ–≤–µ–Ω—å (LBM, SPACE, follow_leader) - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º app_state
            register_try_actions(
                self.action_manager,
                self.ahk_manager,
                self.app_state  # –ù–û–í–û–ï: –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PIDs –≥—Ä—É–ø–ø—ã
            )
            
            # PRO —É—Ä–æ–≤–µ–Ω—å (TARGET, NEXT >>, <- LONG, LONG ->, FINAL ->)
            register_pro_actions(
                self.action_manager,
                self.manager,
                self.app_state,
                self.action_limiter
            )
            
            # DEV —É—Ä–æ–≤–µ–Ω—å (ACT SO, ACT GO)
            register_dev_actions(
                self.action_manager,
                self.manager,
                self.app_state,
                self.action_limiter
            )

    def _create_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI"""
        self.root = tk.Tk()
        self.root.title("Discord")
    
        # === –ó–ê–ì–†–£–ó–ò–¢–¨ –ü–û–ó–ò–¶–ò–Æ –ò–ó –ù–ê–°–¢–†–û–ï–ö ===
        pos = self.settings_manager.get_window_position()
        self.root.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}+{pos['x']}+{pos['y']}")
        
        self.root.configure(bg=COLOR_BG)
        
        # –£–±—Ä–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–º–∫—É –æ–∫–Ω–∞
        self.root.overrideredirect(True)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        
        # === TITLE BAR (–∫–∞—Å—Ç–æ–º–Ω–∞—è) ===
        self.title_bar = tk.Frame(self.root, bg=COLOR_BG, height=40)
        self.title_bar.pack(fill=tk.X, side=tk.TOP)
        self.title_bar.pack_propagate(False)
        
        # –ò–∫–æ–Ω–∫–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å–ª–µ–≤–∞)
        try:
            icon_image = Image.open(TRAY_ICON_PATH)
            icon_image = icon_image.resize((18, 18), Image.Resampling.LANCZOS)
            self.app_icon = ImageTk.PhotoImage(icon_image)
            icon_label = tk.Label(self.title_bar, image=self.app_icon, bg=COLOR_BG)
            icon_label.pack(side=tk.LEFT, padx=(10, 5))
        except:
            pass
        
        title_label = tk.Label(
            self.title_bar,
            text="Xvocmuk",
            font=FONT_TITLE,
            bg=COLOR_BG,
            fg=COLOR_TEXT
        )
        title_label.pack(side=tk.LEFT, padx=0)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º (–ò–°–ü–†–ê–í–õ–ï–ù–û - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å—Ç—É–ø—ã)
        # –ü–û–†–Ø–î–û–ö: Refresh, Pin, Minimize, Close

        # –ö–Ω–æ–ø–∫–∞ Close (–ß–ï–¢–í–Å–†–¢–ê–Ø)
        self.close_btn = tk.Label(
            self.title_bar,
            text="‚úï",
            font=("Segoe UI", 14, "bold"),  # –ñ–∏—Ä–Ω–µ–µ
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            width=2,
            height=1,
            anchor="center"
        )
        self.close_btn.pack(side=tk.RIGHT, padx=(0, 10))  # –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è
        self.close_btn.bind("<Button-1>", lambda e: self.on_close())
        self.close_btn.bind("<Enter>", lambda e: self.close_btn.configure(fg=COLOR_ACCENT))
        self.close_btn.bind("<Leave>", lambda e: self.close_btn.configure(fg=COLOR_TEXT))

        # –ö–Ω–æ–ø–∫–∞ Minimize (–¢–†–ï–¢–¨–Ø)
        self.minimize_btn = tk.Label(
            self.title_bar,
            text="‚àí",
            font=("Segoe UI", 14, "bold"),  # –ñ–∏—Ä–Ω–µ–µ
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            width=2,
            height=1,
            anchor="center"
        )
        self.minimize_btn.pack(side=tk.RIGHT, padx=0)
        self.minimize_btn.bind("<Button-1>", lambda e: self.minimize_to_tray())
        self.minimize_btn.bind("<Enter>", lambda e: self.minimize_btn.configure(fg=COLOR_ACCENT))
        self.minimize_btn.bind("<Leave>", lambda e: self.minimize_btn.configure(fg=COLOR_TEXT))

        # –ö–Ω–æ–ø–∫–∞ Pin (–í–¢–û–†–ê–Ø)
        self.pin_btn = tk.Label(
            self.title_bar,
            text="üìå",
            font=("Segoe UI", 10),  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä
            bg=COLOR_BG,
            fg=COLOR_TEXT if not self.settings_manager.is_topmost() else COLOR_ACCENT,
            cursor="hand2",
            width=2,
            height=1,
            anchor="center"
        )
        self.pin_btn.pack(side=tk.RIGHT, padx=0)
        self.pin_btn.bind("<Button-1>", lambda e: self.toggle_topmost())
        self.pin_btn.bind("<Enter>", lambda e: self.pin_btn.configure(fg=COLOR_ACCENT_HOVER))
        self.pin_btn.bind("<Leave>", lambda e: self.pin_btn.configure(
            fg=COLOR_ACCENT if self.is_topmost else COLOR_TEXT
        ))

        # –ö–Ω–æ–ø–∫–∞ Refresh (–ü–ï–†–í–ê–Ø)
        self.refresh_btn = tk.Label(
            self.title_bar,
            text="‚ü≥",
            font=("Segoe UI", 13, "bold"),  # –ñ–∏—Ä–Ω–µ–µ –∏ –∫—Ä—É–ø–Ω–µ–µ
            bg=COLOR_BG,
            fg=COLOR_TEXT,
            cursor="hand2",
            width=3,
            height=1,
            anchor="center"
        )
        self.refresh_btn.pack(side=tk.RIGHT, padx=0)
        self.refresh_btn.bind("<Button-1>", lambda e: self.on_refresh())
        self.refresh_btn.bind("<Enter>", lambda e: self.refresh_btn.configure(fg=COLOR_ACCENT))
        self.refresh_btn.bind("<Leave>", lambda e: self.refresh_btn.configure(fg=COLOR_TEXT))
        
        # Drag window - –ø—Ä–∏–≤—è–∑–∫–∞ –∫ title bar
        self.title_bar.bind("<Button-1>", self._start_drag)
        self.title_bar.bind("<B1-Motion>", self._do_drag)
        title_label.bind("<Button-1>", self._start_drag)
        title_label.bind("<B1-Motion>", self._do_drag)
        
        # === MAIN CONTENT ===
        content_frame = tk.Frame(self.root, bg=COLOR_BG)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=(0, 5))  # ‚Üê pady=(0, 5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –®–ò–†–ò–ù–ê + –†–ê–ú–ö–ê)
        left_container = tk.Frame(
            content_frame, 
            bg=COLOR_BG, 
            width=CHARACTERS_PANEL_WIDTH,
            highlightthickness=1,
            highlightbackground=COLOR_BORDER
        )
        left_container.pack(side=tk.LEFT, fill=tk.Y, expand=False, padx=0)  # ‚Üê padx=0 –≤–º–µ—Å—Ç–æ padx=(0, 10)
        left_container.pack_propagate(False)
        
        self.character_panel = CharacterPanel(
            left_container,
            self.app_state,
            on_character_selected=None,  # –£–î–ê–õ–ï–ù–û: toggle –≤—ã–±–æ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            on_character_toggled=self.on_character_toggled
        )
        self.character_panel.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: —Ö–æ—Ç–∫–µ–∏ + –∏–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–° –†–ê–ú–ö–û–ô)
        self.right_container = tk.Frame(
            content_frame,
            bg=COLOR_BG,
            highlightthickness=1,
            highlightbackground=COLOR_BORDER
        )
        self.right_container.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        self.hotkey_panel = HotkeyPanel(
            self.right_container,
            self.app_state,
            self.action_manager,
            self.hotkey_manager,
            self.settings_manager,
            on_action_executed=self.on_action_executed
        )
        self.hotkey_panel.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
                
        # –û–¢–õ–ê–î–ö–ê
        logging.info(f"üìã HotkeyPanel created, actions count: {len(self.action_manager.get_hotkey_actions())}")

    def _on_hotkey_flash(self, action_id: str):
        """Callback –¥–ª—è –º–∏–≥–∞–Ω–∏—è UI –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ö–æ—Ç–∫–µ—è"""
        # –í—ã–∑—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ GUI
        self.root.after(0, lambda: self.hotkey_panel.flash_action(action_id))

    def _setup_hotkey_flash(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ö–æ—Ç–∫–µ–µ–≤"""
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ—Ç–∫–µ–µ–≤
        original_handler = self.hotkey_manager._on_hotkey_pressed
        
        def new_handler(action_id: str):
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            self.action_manager.execute(action_id)
            
            # –ú–∏–≥–Ω—É—Ç—å –≤ UI
            self.hotkey_panel.flash_action(action_id)
        
        self.hotkey_manager._on_hotkey_pressed = new_handler
    
    def _start_drag(self, event):
        """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self._drag_start_x = event.x
        self._drag_start_y = event.y
    
    def _do_drag(self, event):
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        x = self.root.winfo_x() + event.x - self._drag_start_x
        y = self.root.winfo_y() + event.y - self._drag_start_y
        self.root.geometry(f"+{x}+{y}")
    
    def minimize_to_tray(self):
        """–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π"""
        self.root.withdraw()
    
    def toggle_topmost(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        self.is_topmost = not self.is_topmost
        
        self.settings_manager.set_topmost(self.is_topmost)
        self.root.attributes('-topmost', self.is_topmost)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
        self.pin_btn.configure(fg=COLOR_ACCENT if self.is_topmost else COLOR_TEXT)
    
    def _create_tray_icon(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ"""
        try:
            image = Image.open(TRAY_ICON_PATH)
            
            menu = pystray.Menu(
                item('Show', self._show_window, default=True),  # default=True !
                item('Always on Top', self._toggle_topmost_from_tray, 
                    checked=lambda item: self.settings_manager.is_topmost()),
                item('Exit', self._exit_from_tray)
            )
            
            self.tray_icon = pystray.Icon("pw_bot", image, "Xvocmuk", menu)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.tray_icon.run, daemon=True).start()
            
            logging.info("–ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logging.error(f"Failed to create tray icon: {e}")

    def _show_window(self, icon=None, item=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∏–∑ —Ç—Ä–µ—è"""
        self.root.after(0, lambda: self.root.deiconify())
        self.root.after(50, lambda: self.root.lift())
        self.root.after(100, lambda: self.root.focus_force())
    
    def _toggle_topmost_from_tray(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å topmost –∏–∑ —Ç—Ä–µ—è"""
        self.toggle_topmost()
    
    def _exit_from_tray(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ç—Ä–µ—è"""
        self.on_close()
    
    def _load_hotkeys(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç–∫–µ–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        hotkeys = self.settings_manager.get_hotkeys()
        
        for action_id, hotkey in hotkeys.items():
            if hotkey and hotkey != "-":
                try:
                    self.hotkey_manager.bind(hotkey, action_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç–∫–µ–π {hotkey}: {e}")
    
    def _save_hotkeys(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–æ—Ç–∫–µ–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        hotkeys = {}
        
        for action_id, action in self.action_manager.actions.items():
            if action.has_hotkey:
                hotkey = self.hotkey_manager.get_hotkey_for_action(action_id)
                hotkeys[action_id] = hotkey if hotkey else "-"
        
        self.settings_manager.set_hotkeys(hotkeys)
    
    def _flash_refresh_button(self):
        """–ú–∏–≥–Ω—É—Ç—å –∫–Ω–æ–ø–∫–æ–π Refresh"""
        self.refresh_btn.configure(fg=COLOR_ACCENT)
        self.root.after(200, lambda: self.refresh_btn.configure(fg=COLOR_TEXT))
    
    def on_refresh(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Refresh - –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô –ü–†–ò –ö–ê–ñ–î–û–ú –í–´–ó–û–í–ï"""
        # –ú–∏–≥–Ω—É—Ç—å –∫–Ω–æ–ø–∫–æ–π
        self._flash_refresh_button()
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –≤ AHK
        self.ahk_manager.refresh_windows()
        
        # === –®–ê–ì 1: –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø (–ö–ê–ñ–î–´–ô –†–ê–ó!) ===
        from core.license import LicenseManager
        is_valid, perm_level = LicenseManager.verify_best_license(self.license_config)
        
        if is_valid:
            self.app_state.verified = True
            old_permission = self.app_state.permission_level
            self.app_state.permission_level = perm_level
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if perm_level != old_permission:
                self.prev_permission_level = perm_level
                self.hotkey_panel.update_display()
                logging.info(f"üîë Permission level updated: {perm_level}")
        else:
            logging.warning("‚ùå License verification failed")
            self.app_state.verified = False
            self.app_state.permission_level = "none"
            
            if self.prev_permission_level != "none":
                self.prev_permission_level = "none"
                self.hotkey_panel.update_display()
        
        # === –®–ê–ì 2: –û–ë–ù–û–í–ò–¢–¨ –ü–ï–†–°–û–ù–ê–ñ–ï–ô ===
        self.manager.refresh()
        
        # === –®–ê–ì 3: –û–ü–†–ï–î–ï–õ–ò–¢–¨ –õ–ò–î–ï–†–ê –ò –ó–ê–ü–ò–°–ê–¢–¨ –í settings.ini ===
        leader, group = self.manager.get_leader_and_group()
        
        if leader:
            leader_pid = leader.pid
            logging.info(f"üéØ Leader found: PID={leader_pid}, Name={leader.char_base.char_name}")
            
            # –ó–∞–ø–∏—Å–∞—Ç—å excluded_windows –≤ settings.ini —á–µ—Ä–µ–∑ AHK
            from pathlib import Path
            settings_ini = Path.home() / "AppData" / "Local" / "xvocmuk" / "settings.ini"
            
            try:
                # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
                if settings_ini.exists():
                    with open(settings_ini, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                else:
                    lines = []
                
                # –ò—â–µ–º —Å–µ–∫—Ü–∏—é [Excluded] –∏ —Å—Ç—Ä–æ–∫—É windows=
                found_section = False
                found_windows = False
                new_lines = []
                
                for line in lines:
                    if line.strip() == '[Excluded]':
                        found_section = True
                        new_lines.append(line)
                    elif found_section and line.startswith('windows='):
                        found_windows = True
                        new_lines.append(f'windows={leader_pid}\n')
                    else:
                        new_lines.append(line)
                
                # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –¥–æ–±–∞–≤–ª—è–µ–º
                if not found_section:
                    new_lines.append('\n[Excluded]\n')
                    new_lines.append(f'windows={leader_pid}\n')
                elif not found_windows:
                    new_lines.append(f'windows={leader_pid}\n')
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                with open(settings_ini, 'w', encoding='utf-8') as f:
                    f.writelines(new_lines)
                
                logging.info(f"‚úÖ Leader PID {leader_pid} saved to settings.ini")
                
            except Exception as e:
                logging.error(f"‚ùå Failed to save leader PID to settings.ini: {e}")
        else:
            logging.info("‚ö†Ô∏è No leader found in group")
        
        # === –®–ê–ì 4: –û–ë–ù–û–í–ò–¢–¨ UI ===
        self.character_panel.set_characters(self.manager.get_all_characters())

        # –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–∞ –Ω–∏–∫–æ–≤ (–ª–∏–¥–µ—Ä/—á–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã)
        self.character_panel.update_display()
        
        logging.info("üîÑ Refresh completed")

    def on_character_selected(self, character):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - toggle –≤—ã–±–æ—Ä–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤—ã–±—Ä–∞–Ω - —Å–Ω—è—Ç—å –≤—ã–±–æ—Ä
        pass
        # if self.app_state.selected_character == character:
        #     self.app_state.select_character(None)
        # else:
        #     # –ò–Ω–∞—á–µ - –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ
        #     self.app_state.select_character(character)
        
        # # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # self.character_panel.update_display()
    
    def on_character_toggled(self, character):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—á–µ–∫–±–æ–∫—Å)"""
        pass
    
    def on_action_executed(self, action_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        self.action_manager.execute(action_id)
        
        # –ú–∏–≥–Ω—É—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ–º –≤ HotkeyPanel
        self.hotkey_panel.flash_action(action_id)
    

    def on_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK
            if hasattr(self, 'ahk_manager'):
                self.ahk_manager.stop()
                
            # –í–ê–ñ–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å keyboard hook
            if hasattr(self, 'hotkey_manager'):
                self.hotkey_manager.stop()
 
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
            x = self.root.winfo_x()
            y = self.root.winfo_y()
            self.settings_manager.set_window_position(x, y)
            
            # –ó–∞–∫—Ä—ã—Ç—å tray icon
            if self.tray_icon:
                self.tray_icon.stop()
            
            # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–∞–º—è—Ç–∏
            for char in self.manager.characters.values():
                if hasattr(char, 'memory'):
                    char.memory.close()
            
            logging.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")
            
            self.root.quit()
            self.root.destroy()
            
        except Exception as e:
            logging.error(f"Error during shutdown: {e}")
            import sys
            sys.exit(0)

    # ============================================
    # –î–ï–ô–°–¢–í–ò–Ø (CALLBACKS)
    # ============================================
    
    def _start_action_loop(self, action_id: str, callback):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ callback –¥–ª—è toggle —ç–∫—à–µ–Ω–∞"""
        interval = TOGGLE_ACTION_INTERVALS.get(action_id, 500)
        
        def loop():
            if self.app_state.is_action_active(action_id):
                try:
                    callback()
                except Exception as e:
                    logging.error(f"Error in {action_id} loop: {e}")
                
                # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                self.action_timers[action_id] = self.root.after(interval, loop)
        
        loop()
    
    def _stop_action_loop(self, action_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤"""
        if action_id in self.action_timers:
            timer_id = self.action_timers[action_id]
            if timer_id:
                try:
                    self.root.after_cancel(timer_id)
                except:
                    pass
            self.action_timers[action_id] = None
    
    def _follow_loop_callback(self):
        """Callback –¥–ª—è Follow loop"""
        active_corrections = self.manager.follow_leader()
        if active_corrections > 0:
            logging.debug(f"Follow: {active_corrections} active corrections")

    def toggle_attack(self):
        """Toggle: –ê—Ç–∞–∫–∞ (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ª–∏–¥–µ—Ä–∞)"""
        is_active = self.app_state.is_action_active('attack')
        
        if is_active:
            print("Attack: STARTED")
            self._start_action_loop('attack', lambda: attack_loop_callback(self.manager))
        else:
            print("Attack: STOPPED")
            self._stop_action_loop('attack')
        
        self.hotkey_panel.update_display()

    def _attack_loop_callback(self):
        """Callback –¥–ª—è Attack loop"""
        success_count = self.manager.set_attack_target()
        if success_count > 0:
            logging.debug(f"Attack: {success_count} targets set")
    
    def toggle_headhunter(self):
        """Toggle: Headhunter (Tab + –õ–ö–ú –ø–æ 100, 100)"""
        is_active = self.app_state.is_action_active('headhunter')
        
        if is_active:
            print("Headhunter: STARTED")
            # –ù–û–í–û–ï: –≤—ã–∑—ã–≤–∞–µ–º AHK, –∞ –Ω–µ Python loop
            self.ahk_manager.start_headhunter()
        else:
            print("Headhunter: STOPPED")
            # –ù–û–í–û–ï: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AHK
            self.ahk_manager.stop_headhunter()
        
        self.hotkey_panel.update_display()
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        self.root.mainloop()

    def start_instance_listener(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        import socket
        
        def listener():
            try:
                server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                server.bind(('127.0.0.1', 47200))
                server.listen(1)
                
                while True:
                    try:
                        client, addr = server.accept()
                        data = client.recv(1024)
                        
                        if data == b'SHOW_WINDOW':
                            # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            self.root.after(0, self._show_window)
                        
                        client.close()
                    except:
                        break
            except:
                pass
        
        threading.Thread(target=listener, daemon=True).start()


    def _start_active_window_polling(self):
        """–ù–û–í–û–ï: –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ ElementClient.exe"""
        def poll():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
                user32 = ctypes.windll.user32
                hwnd = user32.GetForegroundWindow()
                
                if hwnd:
                    # –ü–æ–ª—É—á–∞–µ–º PID –æ–∫–Ω–∞
                    process_id = wintypes.DWORD()
                    user32.GetWindowThreadProcessId(hwnd, ctypes.byref(process_id))
                    pid = process_id.value
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                    if pid in self.manager.characters:
                        character = self.manager.characters[pid]
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º last_active_character
                        if character.is_valid():
                            self.app_state.set_last_active_character(character)
                            logging.debug(f"Active window: {character.char_base.char_name}")
            
            except Exception as e:
                logging.error(f"Error in active window polling: {e}")
            
            # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 500ms
            self.root.after(500, poll)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        self.root.after(500, poll)

    def _update_party_colors(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ü–≤–µ—Ç–∞ –Ω–∏–∫–æ–≤ (–ª–∏–¥–µ—Ä/—á–ª–µ–Ω—ã)"""
        if hasattr(self, 'character_panel'):
            self.character_panel.update_display()
        
        # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(2000, self._update_party_colors)