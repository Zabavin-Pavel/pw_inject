"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ —Ñ–∞–π–ª—ã (settings.json) –≤ AppData
"""
import json
import logging
from pathlib import Path
import sys

class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (UI, —Ö–æ—Ç–∫–µ–∏, –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞)"""
    
    def __init__(self, settings_file="settings.json"):
        # AppData –ø–∞–ø–∫–∞ (–≤—Å–µ–≥–¥–∞ - –∏ –¥–ª—è dev –∏ –¥–ª—è prod)
        # C:\Users\USERNAME\AppData\Local\xvocmuk\
        self.appdata_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        self.appdata_dir.mkdir(parents=True, exist_ok=True)
        
        # settings.json –í–°–ï–ì–î–ê –≤ AppData
        self.settings_file = self.appdata_dir / settings_file
        
        # –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        self.is_frozen = getattr(sys, 'frozen', False)
        
        logging.info(f"üìÅ Settings file: {self.settings_file}")
        
        self.settings = self._load_settings()
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.settings_file.exists():
            logging.info("‚ö†Ô∏è Settings file not found, creating default")
            default_settings = self._get_default_settings()
            self._save_settings(default_settings)
            return default_settings
        
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                logging.info(f"‚úÖ Settings loaded from {self.settings_file}")
                return settings
        except Exception as e:
            logging.error(f"‚ùå Failed to load settings: {e}")
            return self._get_default_settings()
    
    def _get_default_settings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "window_position": {"x": 100, "y": 100},
            "is_topmost": False,
            "hotkeys": {
                # TRY
                "ahk_click_mouse": "-",
                "ahk_press_space": "-",
                "ahk_follow_lider": "-",
                # PRO
                "separator_pro": "-",
                "tp_to_target": "-",
                "tp_next": "-",
                "tp_long_left": "-",
                "tp_long_right": "-",
                "tp_exit": "-",
                # DEV
                "separator_dev": "-",
                "tp_to_so": "-",
                "tp_to_go": "-",
            }
        }
    
    def _save_settings(self, settings):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø—Ä—è–º—É—é (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logging.error(f"‚ùå Failed to save settings: {e}")
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        self._save_settings(self.settings)
        logging.info("‚úÖ Settings saved")
    
    def get_hotkeys(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç–∫–µ–∏"""
        return self.settings.get("hotkeys", {})
    
    def set_hotkeys(self, hotkeys: dict):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç–∫–µ–∏"""
        self.settings["hotkeys"] = hotkeys
        self.save()
    
    def get_window_position(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞"""
        return self.settings.get("window_position", {"x": 100, "y": 100})
    
    def set_window_position(self, x: int, y: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞"""
        self.settings["window_position"] = {"x": x, "y": y}
        self.save()
    
    def is_topmost(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        return self.settings.get("is_topmost", False)
    
    def set_topmost(self, topmost: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        self.settings["is_topmost"] = topmost
        self.save()