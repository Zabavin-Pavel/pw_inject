"""
–ú–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –û–ë–ù–û–í–õ–ï–ù–û
–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ fly trigger —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""
# from characters.behaviors import CharacterBehavior
import logging

class Character:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self, pid, memory, char_base):
        self.pid = pid
        self.memory = memory
        self.char_base = char_base
        self.manager = None  # –ù–û–í–û–ï: –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ CharacterManager
        
        # –ü–æ–≤–µ–¥–µ–Ω–∏–µ (–∫–ª–∞—Å—Å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        # self.behavior = CharacterBehavior.for_class(char_base.char_class)
        
        # –î–ª—è Follow: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –ø–æ–ª–µ—Ç–∞
        self.fly_freeze_info = None
        
        # –ù–û–í–û–ï: –ö–µ—à fly trigger —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ—Ç–æ–º)
        # None –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ—Ç–æ–º {'on': int, 'off': int}
        self.fly_trigger_states = None
    
    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        return self.char_base.is_valid()
    
    def update_fly_trigger_cache(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à fly trigger —Å–æ—Å—Ç–æ—è–Ω–∏–π
        
        –õ–æ–≥–∏–∫–∞:
        - –ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π fly_trigger
        - –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å fly_status (–ª–µ—Ç–∏—Ç/–Ω–µ –ª–µ—Ç–∏—Ç)
        - –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–º –æ–±–∞ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        """
        # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—à–ª–∏ –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if self.fly_trigger_states and len(self.fly_trigger_states) == 2:
            return
        
        from game.offsets import resolve_offset, OFFSETS
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        fly_status = resolve_offset(self.memory, OFFSETS["fly_status"], self.char_base.cache)
        fly_trigger = resolve_offset(self.memory, OFFSETS["fly_trigger"], self.char_base.cache)
        
        if fly_status is None or fly_trigger is None:
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
        if self.fly_trigger_states is None:
            self.fly_trigger_states = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º trigger
        if fly_status == 1:  # –õ–µ—Ç–∏—Ç
            if 'on' not in self.fly_trigger_states:
                self.fly_trigger_states['on'] = fly_trigger
                import logging
                logging.info(f"‚úàÔ∏è FLY ON: PID={self.pid}, trigger={fly_trigger}")
        else:  # –ù–µ –ª–µ—Ç–∏—Ç
            if 'off' not in self.fly_trigger_states:
                self.fly_trigger_states['off'] = fly_trigger
                import logging
                logging.info(f"üö∂ FLY OFF: PID={self.pid}, trigger={fly_trigger}")
    
    def can_control_flight(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ–º –ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª–µ—Ç–æ–º (–Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)"""
        return (self.fly_trigger_states is not None and 
                'on' in self.fly_trigger_states and 
                'off' in self.fly_trigger_states)
    
    def set_flight_state(self, should_fly: bool):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ—Ç–∞
        
        Args:
            should_fly: True = –ª–µ—Ç–∞—Ç—å, False = –Ω–µ –ª–µ—Ç–∞—Ç—å
        
        Returns:
            bool: —É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not self.can_control_flight():
            return False
        
        from game.offsets import resolve_offset, OFFSETS
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        target_value = self.fly_trigger_states['on'] if should_fly else self.fly_trigger_states['off']
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å fly_trigger
        char_base = self.char_base.cache.get("char_base")
        if not char_base:
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        return self.memory.write_int(char_base + 0xA58, target_value)