"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û
"""
import ctypes
import logging
import math
from game.memory import Memory
from game.structs import CharBase, WorldManager
from characters.character import Character
from config.constants import DUNGEON_POINTS, LOOT_CHECK_RADIUS
from game.win32_api import TH32CS_SNAPPROCESS, PROCESSENTRY32


class MultiboxManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self):
        self.characters = {}  # {pid: Character}
        self.kernel32 = ctypes.windll.kernel32
        
        # WorldManager –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–≥–ª–∞–≤–Ω—ã–π)
        self.world_manager = None
        self._main_pid = None
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∏–∑ GUI)
        self.ahk_manager = None
        self.app_state = None
    
    def set_ahk_manager(self, ahk_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.ahk_manager = ahk_manager
    
    def set_app_state(self, app_state):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å app_state"""
        self.app_state = app_state
    
    def _get_all_pids(self, process_name="ElementClient.exe"):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PID –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        snapshot = self.kernel32.CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
        pe32 = PROCESSENTRY32()
        pe32.dwSize = ctypes.sizeof(PROCESSENTRY32)
        
        pids = []
        
        if self.kernel32.Process32First(snapshot, ctypes.byref(pe32)):
            while True:
                current_name = pe32.szExeFile.decode('utf-8', errors='ignore')
                if current_name.lower() == process_name.lower():
                    pids.append(pe32.th32ProcessID)
                
                if not self.kernel32.Process32Next(snapshot, ctypes.byref(pe32)):
                    break
        
        self.kernel32.CloseHandle(snapshot)
        return pids
    
    def validate_all(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        to_remove = []
        
        for pid, char in self.characters.items():
            if not char.is_valid():
                char.memory.close()
                to_remove.append(pid)
        
        for pid in to_remove:
            del self.characters[pid]
    
    def refresh(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        current_pids = set(self._get_all_pids())
        existing_pids = set(self.characters.keys())
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in existing_pids - current_pids:
            char = self.characters[pid]
            char.memory.close()
            del self.characters[pid]
            
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≥–ª–∞–≤–Ω—ã–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º WorldManager
            if pid == self._main_pid:
                self.world_manager = None
                self._main_pid = None
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        to_recreate = []
        for pid, char in list(self.characters.items()):
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            char.char_base.refresh()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if not char.char_base.is_valid():
                to_recreate.append(pid)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–µ—Å–ª–∏ char_id –∏–∑–º–µ–Ω–∏–ª—Å—è)
            # CharBase —É–∂–µ –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ–π –∫–µ—à –≤ _update(), –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å Character
            # –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è behavior –∏ –ø—Ä–æ—á–µ–≥–æ
            if char.char_base._previous_char_id != char.char_base.char_id:
                logging.info(f"üîÑ Character changed in PID {pid}, recreating...")
                to_recreate.append(pid)
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)
        for pid in to_recreate:
            old_char = self.characters[pid]
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º Character —Å –Ω–æ–≤—ã–º CharBase
            char_base = CharBase(old_char.memory)
            new_char = Character(pid, old_char.memory, char_base)
            
            self.characters[pid] = new_char
            
            logging.info(f"‚úÖ Character recreated for PID {pid}: {char_base.char_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in current_pids - existing_pids:
            mem = Memory()
            if mem.attach_by_pid(pid):
                char_base = CharBase(mem)
                char = Character(pid, mem, char_base)
                self.characters[pid] = char
                
                # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º (–¥–ª—è WorldManager)
                if self._main_pid is None:
                    self._main_pid = pid
                    self.world_manager = WorldManager(mem)
                
                logging.info(f"‚úÖ New character added: {char_base.char_name} (PID: {pid})")
    
    def refresh_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è refresh()"""
        self.refresh()
    
    def get_all_characters(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ê–õ–ò–î–ù–´–• –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        valid_chars = []
        for char in self.characters.values():
            if char.is_valid():
                valid_chars.append(char)
        return valid_chars
    
    def get_valid_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI"""
        return self.get_all_characters()
    
    # ===================================================
    # LEADER AND GROUP
    # ===================================================

    def get_leader_and_group(self):
        """
        –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        
        Returns:
            (leader: Character, members: list[Character]) –∏–ª–∏ (None, [])
        """
        from game.offsets import resolve_offset, OFFSETS
        
        groups = {}  # {leader_id: [char1, char2, ...]}
        
        for char in self.get_all_characters():
            char.char_base.refresh()
            
            party_ptr = resolve_offset(char.memory, OFFSETS["party_ptr"], char.char_base.cache)
            
            if not party_ptr or party_ptr == 0:
                continue
            
            char.char_base.cache["party_ptr"] = party_ptr
            
            party_leader_id = resolve_offset(char.memory, OFFSETS["party_leader_id"], char.char_base.cache)
            
            if not party_leader_id:
                continue
            
            if party_leader_id not in groups:
                groups[party_leader_id] = []
            
            groups[party_leader_id].append(char)
        
        if not groups:
            return None, []
        
        # –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞
        largest_group_leader_id = max(groups.keys(), key=lambda lid: len(groups[lid]))
        largest_group = groups[largest_group_leader_id]
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥–µ—Ä–∞ —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        leader = None
        for char in largest_group:
            if char.char_base.char_id == largest_group_leader_id:
                leader = char
                break
        
        if not leader:
            return None, []
        
        return leader, largest_group

    # ===================================================
    # –¢–ò–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò (–£–ü–†–û–©–ï–ù–û)
    # ===================================================
    
    def teleport_character(self, character, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            character: –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            bool: –≤—Å–µ–≥–¥–∞ True (–ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—Ç)
        """
        if not character or not character.is_valid():
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        character.char_base.set_position(target_x, target_y, target_z)
        
        # –ù–∞–∂–∏–º–∞–µ–º space –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–û–î–ò–ù–û–ß–ù–´–ô)
        if send_space and self.ahk_manager:
            self.ahk_manager.send_key_to_pid("space", character.pid)
        
        return True
    
    def teleport_group(self, characters, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            characters: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        if not characters:
            return 0
        
        success_count = 0
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ–º (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        for char in characters:
            if char.is_valid():
                char.char_base.set_position(target_x, target_y, target_z)
                success_count += 1
        
        # –ù–∞–∂–∏–º–∞–µ–º space –í–°–ï–ú –°–†–ê–ó–£ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ú–ê–°–°–û–í–´–ô)
        if send_space and success_count > 0 and self.ahk_manager:
            self.ahk_manager.send_key("space")
        
        return success_count
    
    # ===================================================
    # –≠–ö–®–ï–ù–´ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
    # ===================================================
    
    def action_teleport_to_target(self, character):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –µ–≥–æ —Ç–∞—Ä–≥–µ—Ç—É (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        """
        if not character:
            return False
        
        target_pos = character.char_base.get_target_position()
        
        if not target_pos:
            return False
        
        target_x, target_y, target_z = target_pos
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å +2 –∫ Z (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        self.teleport_character(
            character, 
            target_x, 
            target_y, 
            target_z + 2,
            send_space=False
        )
        
        return True
    
    def tp_to_leader(self):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –∫ –ª–∏–¥–µ—Ä—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        """
        leader, group = self.get_leader_and_group()
        
        if not leader:
            logging.warning("TP to LIDER: No valid leader found")
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_x = leader.char_base.char_pos_x
        leader_y = leader.char_base.char_pos_y
        leader_z = leader.char_base.char_pos_z
        
        if leader_x is None or leader_y is None or leader_z is None:
            logging.error("TP to LIDER: Failed to read leader position")
            return 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–ª–µ–Ω–æ–≤ (–±–µ–∑ –ª–∏–¥–µ—Ä–∞, –≤ —Ä–∞–¥–∏—É—Å–µ 300–º)
        members_to_tp = []
        
        for member in group:
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            member_x = member.char_base.char_pos_x
            member_y = member.char_base.char_pos_y
            member_z = member.char_base.char_pos_z
            
            if member_x is None or member_y is None or member_z is None:
                continue
            
            distance = math.sqrt(
                (member_x - leader_x)**2 + 
                (member_y - leader_y)**2 + 
                (member_z - leader_z)**2
            )
            
            if distance <= 300:
                members_to_tp.append(member)
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        return self.teleport_group(
            members_to_tp, 
            leader_x, 
            leader_y, 
            leader_z + 0.5,
            send_space=True
        )
    
    def tp_to_point(self, point_name):
        """
        –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞ –∫ —Ç–æ—á–∫–µ (SO, GO –∏ —Ç.–¥.)
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        """
        active_char = self.app_state.last_active_character if self.app_state else None
        
        if not active_char:
            logging.warning(f"TP to {point_name}: No active character")
            return False
        
        # –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏
        point = None
        for p in DUNGEON_POINTS:
            if p["name"] == point_name:
                point = p
                break
        
        if not point:
            logging.error(f"TP to {point_name}: Point not found")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        active_char.char_base.refresh()
        char_x = active_char.char_base.char_pos_x
        char_y = active_char.char_base.char_pos_y
        
        if char_x is None or char_y is None:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger_x, trigger_y = point["trigger"]
        radius = point["radius"]
        
        dx = abs(char_x - trigger_x)
        dy = abs(char_y - trigger_y)
        
        if dx <= radius and dy <= radius:
            # –í –∑–æ–Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º (–° –û–î–ò–ù–û–ß–ù–´–ú SPACE)
            target_x, target_y, target_z = point["target"]
            return self.teleport_character(
                active_char, 
                target_x, 
                target_y, 
                target_z,
                send_space=True
            )
        else:
            char_name = active_char.char_base.char_name
            logging.info(f"TP to {point_name}: {char_name} not in trigger zone (dx={dx:.1f}, dy={dy:.1f})")
            return False
    
    # ===================================================
    # TELEPORT TOGGLE - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    # ===================================================
    
    def check_teleport_conditions(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∏–∑ toggle loop
        
        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ = –ª–∏–¥–µ—Ä ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ–º PARTY + SOLO —Ç–æ—á–∫–∏
        2. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ù–ï –ª–∏–¥–µ—Ä (–∏–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã) ‚Üí —Ç–æ–ª—å–∫–æ SOLO —Ç–æ—á–∫–∏
        
        Returns:
            str: —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if not self.world_manager or not self.app_state:
            return "‚ùå Not initialized"
        
        active_char = self.app_state.last_active_character
        
        if not active_char:
            return "‚ùå No active window"
        
        leader, group = self.get_leader_and_group()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ª–∏–¥–µ—Ä–æ–º
        is_leader = (active_char == leader)
        
        # === –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–û–ß–ï–ö ===
        for point in DUNGEON_POINTS:
            mode = point["mode"]
            
            # SOLO —Ç–æ—á–∫–∏ - –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
            if mode == "solo":
                result = self._check_solo_point(active_char, point)
                if result:
                    return result
            
            # PARTY —Ç–æ—á–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏–¥–µ—Ä–∞
            elif mode == "party" and is_leader:
                result = self._check_party_point(leader, group, point)
                if result:
                    return result
        
        return "‚è≥ No trigger points active"

    def _check_solo_point(self, character, point):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SOLO —Ç–æ—á–∫—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        point_name = point["name"]
        trigger_x, trigger_y = point["trigger"]
        radius = point["radius"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        character.char_base.refresh()
        char_x = character.char_base.char_pos_x
        char_y = character.char_base.char_pos_y
        
        if char_x is None or char_y is None:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        dx = abs(char_x - trigger_x)
        dy = abs(char_y - trigger_y)
        
        if dx <= radius and dy <= radius:
            # –í —Ç—Ä–∏–≥–≥–µ—Ä–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if point.get("check_loot", False):
                # –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ª—É—Ç?
                if self.world_manager.has_any_loot():
                    # –î–∞, –µ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    loot_items = self.world_manager.get_loot_nearby(
                        (char_x, char_y, character.char_base.char_pos_z),
                        LOOT_CHECK_RADIUS
                    )
                    
                    if loot_items and len(loot_items) > 0:
                        return f"‚è≥ {point_name} (SOLO) - Waiting for loot ({len(loot_items)} items)"
            
            # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º (–° –û–î–ò–ù–û–ß–ù–´–ú SPACE)
            target_x, target_y, target_z = point["target"]
            self.teleport_character(
                character, 
                target_x, 
                target_y, 
                target_z,
                send_space=True
            )
            
            char_name = character.char_base.char_name
            logging.info(f"‚úÖ {point_name} (SOLO): {char_name} teleported")
            return f"‚úÖ {point_name} (SOLO) - Teleported"
        
        return None

    def _check_party_point(self, leader, group, point):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å PARTY —Ç–æ—á–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        point_name = point["name"]
        trigger_x, trigger_y = point["trigger"]
        radius = point["radius"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_x = leader.char_base.char_pos_x
        leader_y = leader.char_base.char_pos_y
        leader_z = leader.char_base.char_pos_z
        
        if leader_x is None or leader_y is None or leader_z is None:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ª–∏–¥–µ—Ä–∞
        dx = abs(leader_x - trigger_x)
        dy = abs(leader_y - trigger_y)
        
        if dx <= radius and dy <= radius:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ
            chars_in_trigger = []
            
            for char in group:
                char.char_base.refresh()
                char_x = char.char_base.char_pos_x
                char_y = char.char_base.char_pos_y
                
                if char_x is None or char_y is None:
                    continue
                
                char_dx = abs(char_x - trigger_x)
                char_dy = abs(char_y - trigger_y)
                
                if char_dx <= radius and char_dy <= radius:
                    chars_in_trigger.append(char)
            
            total_chars = len(group)
            ready_chars = len(chars_in_trigger)
            
            # –ù–µ –≤—Å–µ –≤ —Ä–∞–¥–∏—É—Å–µ
            if ready_chars < total_chars:
                return f"‚è≥ {point_name} (PARTY) - {ready_chars}/{total_chars} ready"
            
            # –í—Å–µ –≤ —Ä–∞–¥–∏—É—Å–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if point.get("check_loot", False):
                # –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ª—É—Ç?
                if self.world_manager.has_any_loot():
                    # –î–∞, –µ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    loot_items = self.world_manager.get_loot_nearby(
                        (leader_x, leader_y, leader_z),
                        LOOT_CHECK_RADIUS
                    )
                    
                    if loot_items and len(loot_items) > 0:
                        return f"‚è≥ {point_name} (PARTY) - {ready_chars}/{total_chars} ready, {len(loot_items)} loot items"
            
            # –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
            target_x, target_y, target_z = point["target"]
            success_count = self.teleport_group(
                chars_in_trigger, 
                target_x, 
                target_y, 
                target_z,
                send_space=True
            )
            
            if success_count > 0:
                logging.info(f"‚úÖ {point_name} (PARTY): {success_count}/{total_chars} teleported")
                return f"‚úÖ {point_name} (PARTY) - Teleported {success_count}/{total_chars}"
        
        return None
    
    # ===================================================
    # FOLLOW –ò ATTACK (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    # ===================================================

    def set_attack_target(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç –ª–∏–¥–µ—Ä–∞ –≤—Å–µ–º —á–ª–µ–Ω–∞–º –≥—Ä—É–ø–ø—ã"""
        leader, group = self.get_leader_and_group()
        
        if not leader:
            return 0
        
        leader.char_base.refresh()
        leader_target_id = leader.char_base.target_id
        
        if not leader_target_id or leader_target_id == 0:
            return 0
        
        success_count = 0
        
        for member in group:
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            if member.char_base.set_target_id(leader_target_id):
                success_count += 1
        
        return success_count

    def follow_leader(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã —Å –ª–∏–¥–µ—Ä–æ–º"""
        leader, group = self.get_leader_and_group()
        
        if not leader:
            return 0
        
        leader.char_base.refresh()
        leader_fly_status = leader.char_base.fly_status
        
        if leader_fly_status != 2:
            # –õ–∏–¥–µ—Ä –Ω–µ –≤ –ø–æ–ª–µ—Ç–µ - —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –≤—Å–µ—Ö
            for member in group:
                if member.char_base.char_id == leader.char_base.char_id:
                    continue
                
                if member.fly_freeze_info and member.fly_freeze_info['active']:
                    member.memory.unfreeze_address(member.fly_freeze_info)
                    member.fly_freeze_info = None
                    member.char_base.set_fly_speed_z(0)
            
            return 0
        
        leader_z = leader.char_base.char_pos_z
        leader_fly_speed = leader.char_base.fly_speed
        
        if leader_z is None or leader_fly_speed is None:
            return 0
        
        active_corrections = 0
        
        for member in group:
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            member_z = member.char_base.char_pos_z
            
            if member_z is None:
                continue
            
            z_diff = member_z - leader_z
            
            if z_diff < -1:
                # –ü–æ–¥–Ω–∏–º–∞—Ç—å—Å—è
                target_fly_speed_z = leader_fly_speed
                
                if member.fly_freeze_info and member.fly_freeze_info['active']:
                    if member.fly_freeze_info['value'] != target_fly_speed_z:
                        member.memory.unfreeze_address(member.fly_freeze_info)
                        member.fly_freeze_info = None
                
                if not member.fly_freeze_info or not member.fly_freeze_info['active']:
                    member.char_base.set_fly_speed_z(target_fly_speed_z)
                    member.fly_freeze_info = member.memory.freeze_address(
                        member.char_base.cache["char_base"] + 0x12A8,
                        target_fly_speed_z,
                        'float',
                        0.1
                    )
                
                active_corrections += 1
            
            elif z_diff > 1:
                # –û–ø—É—Å–∫–∞—Ç—å—Å—è
                target_fly_speed_z = -leader_fly_speed
                
                if member.fly_freeze_info and member.fly_freeze_info['active']:
                    if member.fly_freeze_info['value'] != target_fly_speed_z:
                        member.memory.unfreeze_address(member.fly_freeze_info)
                        member.fly_freeze_info = None
                
                if not member.fly_freeze_info or not member.fly_freeze_info['active']:
                    member.char_base.set_fly_speed_z(target_fly_speed_z)
                    member.fly_freeze_info = member.memory.freeze_address(
                        member.char_base.cache["char_base"] + 0x12A8,
                        target_fly_speed_z,
                        'float',
                        0.1
                    )
                
                active_corrections += 1
            
            else:
                # –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å
                if member.fly_freeze_info and member.fly_freeze_info['active']:
                    member.memory.unfreeze_address(member.fly_freeze_info)
                    member.fly_freeze_info = None
                    member.char_base.set_fly_speed_z(0)
        
        return active_corrections