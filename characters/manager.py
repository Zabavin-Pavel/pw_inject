"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–û
"""
import ctypes
import logging
import math
from game.memory import Memory
from game.structs import CharBase, WorldManager
from characters.character import Character
from config.constants import DUNGEON_POINTS, LOOT_CHECK_RADIUS
from game.win32_api import TH32CS_SNAPPROCESS, PROCESSENTRY32
from game.offsets import resolve_offset, OFFSETS


class MultiboxManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self):
        self.characters = {}  # {pid: Character}
        self.kernel32 = ctypes.windll.kernel32
        
        # WorldManager –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–≥–ª–∞–≤–Ω—ã–π)
        self.world_manager = None
        self._main_pid = None
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∏–∑ GUI)
        self.ahk_manager = None
        self.app_state = None
        self.action_limiter = None  # –ù–û–í–û–ï: —Å–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤
    
    def set_ahk_manager(self, ahk_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.ahk_manager = ahk_manager
    
    def set_app_state(self, app_state):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å app_state"""
        self.app_state = app_state
    
    def set_action_limiter(self, action_limiter):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å action_limiter"""
        self.action_limiter = action_limiter
    
    def _get_all_pids(self, process_name="ElementClient.exe"):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PID –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        snapshot = self.kernel32.CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
        pe32 = PROCESSENTRY32()
        pe32.dwSize = ctypes.sizeof(PROCESSENTRY32)
        
        pids = []
        
        if self.kernel32.Process32First(snapshot, ctypes.byref(pe32)):
            while True:
                current_name = pe32.szExeFile.decode('utf-8', errors='ignore')
                if current_name.lower() == process_name.lower():
                    pids.append(pe32.th32ProcessID)
                
                if not self.kernel32.Process32Next(snapshot, ctypes.byref(pe32)):
                    break
        
        self.kernel32.CloseHandle(snapshot)
        return pids
    
    def validate_all(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        to_remove = []
        
        for pid, char in self.characters.items():
            if not char.is_valid():
                char.memory.close()
                to_remove.append(pid)
        
        for pid in to_remove:
            del self.characters[pid]
    
    def refresh(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        current_pids = set(self._get_all_pids())
        existing_pids = set(self.characters.keys())
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in existing_pids - current_pids:
            char = self.characters[pid]
            char.memory.close()
            del self.characters[pid]
            
            if pid == self._main_pid:
                self.world_manager = None
                self._main_pid = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        to_recreate = []
        for pid, char in list(self.characters.items()):
            char.char_base.refresh()
            
            if not char.char_base.is_valid():
                to_recreate.append(pid)
                continue
            
            if char.char_base._previous_char_id != char.char_base.char_id:
                logging.info(f"üîÑ Character changed in PID {pid}, recreating...")
                to_recreate.append(pid)
            else:
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º fly trigger –∫–µ—à (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–µ–Ω—è–ª—Å—è)
                char.update_fly_trigger_cache()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)
        for pid in to_recreate:
            old_char = self.characters[pid]
            char_base = CharBase(old_char.memory)
            new_char = Character(pid, old_char.memory, char_base)
            self.characters[pid] = new_char
            logging.info(f"‚úÖ Character recreated for PID {pid}: {char_base.char_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in current_pids - existing_pids:
            mem = Memory()
            if mem.attach_by_pid(pid):
                char_base = CharBase(mem)
                logging.info(f"DEBUG PID={pid}: char_origin={hex(char_base.cache.get('char_origin', 0))}, char_base={hex(char_base.cache.get('char_base', 0))}")
                char = Character(pid, mem, char_base)
                self.characters[pid] = char
                
                if self._main_pid is None:
                    self._main_pid = pid
                    self.world_manager = WorldManager(mem)
                
                char_name = char_base.char_name if char_base.char_name else "???"
                logging.info(f"‚úÖ New character added: PID={pid}, Name={repr(char_name)}")


        
        # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø—É pid‚Üîchar_id –≤ AppState
        if self.app_state:
            self.app_state.update_pid_char_id_map(self.get_all_characters())
    
    def refresh_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è refresh()"""
        self.refresh()
    
    def get_all_characters(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ê–õ–ò–î–ù–´–• –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        valid_chars = []
        for char in self.characters.values():
            if char.is_valid():
                valid_chars.append(char)
        return valid_chars
    
    def get_valid_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI"""
        return self.get_all_characters()
    
    # ===================================================
    # –ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê GET_LEADER_AND_GROUP
    # ===================================================
    
    def get_leader_and_group(self):
        """
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        - –ï—Å–ª–∏ –æ–Ω –≤ –ø–∞—Ç–∏ ‚Üí –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –æ—Ñ—Ñ—Å–µ—Ç—ã
        - –ò–Ω–∞—á–µ ‚Üí –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ
        
        Returns:
            (leader: Character, members: list[Character])
            - leader: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (–∏–ª–∏ None)
            - members: [leader] –µ—Å–ª–∏ –±–µ–∑ –ø–∞—Ç–∏, –∏–ª–∏ –≤—Å—è –≥—Ä—É–ø–ø–∞ –µ—Å–ª–∏ –≤ –ø–∞—Ç–∏
        """
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        leader = self.app_state.last_active_character if self.app_state else None
        
        if not leader or not leader.is_valid():
            return None, []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ç–∏
        party_ptr = resolve_offset(leader.memory, OFFSETS["party_ptr"], leader.char_base.cache)
        
        if not party_ptr or party_ptr == 0:
            # –ù–µ—Ç –ø–∞—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–∞
            return leader, [leader]
        
        # –ï—Å—Ç—å –ø–∞—Ç–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
        leader.char_base.cache["party_ptr"] = party_ptr
        
        party_members = resolve_offset(leader.memory, OFFSETS["party_members"], leader.char_base.cache)
        
        if not party_members:
            return leader, [leader]
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã
        group_chars = []
        
        for member in party_members:
            member_id = member.get('id')
            if not member_id:
                continue
            
            # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ char_id —á–µ—Ä–µ–∑ –º–∞–ø—É
            if self.app_state:
                member_pid = self.app_state.get_pid_by_char_id(member_id)
                if member_pid and member_pid in self.characters:
                    char = self.characters[member_pid]
                    if char.is_valid():
                        group_chars.append(char)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–æ–≥–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–∞
        if not group_chars:
            return leader, [leader]
        
        return leader, group_chars
    
    # ===================================================
    # –¢–ò–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò (–° –ü–†–û–í–ï–†–ö–û–ô –õ–ò–¶–ï–ù–ó–ò–ò)
    # ===================================================
    
    def teleport_character(self, character, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            character: –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            bool: –≤—Å–µ–≥–¥–∞ True (–ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—Ç)
        """
        if not character or not character.is_valid():
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        character.char_base.set_position(target_x, target_y, target_z)
        
        # –ù–∞–∂–∏–º–∞–µ–º space –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–û–î–ò–ù–û–ß–ù–´–ô)
        if send_space and self.ahk_manager:
            self.ahk_manager.send_key_to_pid("space", character.pid)
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._check_license_expiry()
        
        return True
    
    def teleport_group(self, characters, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            characters: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        if not characters:
            return 0
        
        success_count = 0
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ–º (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        for char in characters:
            if char.is_valid():
                char.char_base.set_position(target_x, target_y, target_z)
                success_count += 1
        
        # –ù–∞–∂–∏–º–∞–µ–º space –í–°–ï–ú –°–†–ê–ó–£ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ú–ê–°–°–û–í–´–ô)
        if send_space and success_count > 0 and self.ahk_manager:
            self.ahk_manager.send_key("space")
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._check_license_expiry()
        
        return success_count
    
    def _check_license_expiry(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
        –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π refresh GUI
        """
        try:
            from core.license_manager import LicenseManager
            from datetime import datetime
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ license_config –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ GUI
            # –≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–¥–ª—è—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LicenseManager
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            
        except Exception as e:
            logging.debug(f"License check skipped: {e}")
    
    # ===================================================
    # –≠–ö–®–ï–ù–´ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
    # ===================================================
    
    def action_teleport_to_target(self, character):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –µ–≥–æ —Ç–∞—Ä–≥–µ—Ç—É (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        """
        if not character:
            return False
        
        target_pos = character.char_base.get_target_position()
        
        if not target_pos:
            return False
        
        target_x, target_y, target_z = target_pos
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å +2 –∫ Z (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        self.teleport_character(
            character, 
            target_x, 
            target_y, 
            target_z + 2,
            send_space=False
        )
        
        return True
    
    def tp_to_leader(self):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –∫ –ª–∏–¥–µ—Ä—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        """
        leader, group = self.get_leader_and_group()
        
        if not leader:
            logging.warning("TP to LIDER: No valid leader found")
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_x = leader.char_base.char_pos_x
        leader_y = leader.char_base.char_pos_y
        leader_z = leader.char_base.char_pos_z
        
        if leader_x is None or leader_y is None or leader_z is None:
            logging.error("TP to LIDER: Failed to read leader position")
            return 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–ª–µ–Ω–æ–≤ (–±–µ–∑ –ª–∏–¥–µ—Ä–∞, –≤ —Ä–∞–¥–∏—É—Å–µ 300–º)
        members_to_tp = []
        
        for member in group:
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            member_x = member.char_base.char_pos_x
            member_y = member.char_base.char_pos_y
            member_z = member.char_base.char_pos_z
            
            if member_x is None or member_y is None or member_z is None:
                continue
            
            distance = math.sqrt(
                (member_x - leader_x)**2 + 
                (member_y - leader_y)**2 + 
                (member_z - leader_z)**2
            )
            
            if distance <= 300:
                members_to_tp.append(member)
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        return self.teleport_group(
            members_to_tp, 
            leader_x, 
            leader_y, 
            leader_z + 0.5,
            send_space=True
        )
    
    def tp_to_point(self, point_name):
        """
        –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞ –∫ —Ç–æ—á–∫–µ (SO, GO –∏ —Ç.–¥.)
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        """
        active_char = self.app_state.last_active_character if self.app_state else None
        
        if not active_char:
            logging.warning(f"TP to {point_name}: No active character")
            return False
        
        # –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏
        point = None
        for p in DUNGEON_POINTS:
            if p["name"] == point_name:
                point = p
                break
        
        if not point:
            logging.error(f"TP to {point_name}: Point not found")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        active_char.char_base.refresh()
        char_x = active_char.char_base.char_pos_x
        char_y = active_char.char_base.char_pos_y
        
        if char_x is None or char_y is None:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger_x, trigger_y = point["trigger"]
        radius = point["radius"]
        
        dx = abs(char_x - trigger_x)
        dy = abs(char_y - trigger_y)
        
        if dx <= radius and dy <= radius:
            # –í –∑–æ–Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º (–° –û–î–ò–ù–û–ß–ù–´–ú SPACE)
            target_x, target_y, target_z = point["target"]
            return self.teleport_character(
                active_char, 
                target_x, 
                target_y, 
                target_z,
                send_space=True
            )
        else:
            char_name = active_char.char_base.char_name
            logging.info(f"TP to {point_name}: {char_name} not in trigger zone (dx={dx:.1f}, dy={dy:.1f})")
            return False

    # ===================================================
    # FOLLOW (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∫–æ–Ω –≤ –ø–∞—Ç–∏, –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏, —Å –ª–∏–¥–µ—Ä–æ–º
    # ===================================================
    
    def follow_leader(self):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ –≥—Ä—É–ø–ø—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        
        –õ–æ–≥–∏–∫–∞:
        1. –¢–æ–ª—å–∫–æ –¥–ª—è –æ–∫–æ–Ω –≤ –ø–∞—Ç–∏
        2. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–¥–µ—Ä —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –æ–∫–æ–Ω
        3. –¢–æ–ª—å–∫–æ –¥–ª—è –æ–∫–æ–Ω –≤ —Ç–æ–π –∂–µ –ª–æ–∫–∞—Ü–∏–∏ —á—Ç–æ –∏ –ª–∏–¥–µ—Ä
        4. –õ–∏–¥–µ—Ä–∞ –ù–ï —Ç—Ä–æ–≥–∞–µ–º (–Ω–µ –º–æ—Ä–æ–∑–∏–º, –Ω–µ –º–µ–Ω—è–µ–º fly_trigger)
        5. –ò—Å–ø–æ–ª—å–∑—É–µ–º fly_trigger –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ—Ç–æ–º (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
        """
        leader, group = self.get_leader_and_group()
        
        if not leader or len(group) <= 1:
            return 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        
        leader_z = leader.char_base.char_pos_z
        leader_fly_status = leader.char_base.fly_status
        leader_location = leader.char_base.location_id
        
        if leader_z is None or leader_fly_status is None or leader_location is None:
            return 0
        
        active_corrections = 0
        
        for member in group:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥–µ—Ä–∞
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ (–ö–†–ò–¢–ò–ß–ù–û!)
            member_location = member.char_base.location_id
            if member_location != leader_location:
                # –û–∫–Ω–æ –≤ –¥—Ä—É–≥–æ–π –ª–æ–∫–∞—Ü–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
            
            member_z = member.char_base.char_pos_z
            member_fly_status = member.char_base.fly_status
            
            if member_z is None or member_fly_status is None:
                continue
            
            # –†–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—ã—Å–æ—Ç–µ
            z_diff = abs(member_z - leader_z)
            
            # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–ï–¢–û–ú (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            if member.can_control_flight():
                # –õ–∏–¥–µ—Ä –ª–µ—Ç–∏—Ç, –∞ —á–ª–µ–Ω –Ω–µ –ª–µ—Ç–∏—Ç
                if leader_fly_status == 1 and member_fly_status != 1:
                    member.set_flight_state(True)
                    logging.debug(f"‚úàÔ∏è {member.char_base.char_name} –≤–∑–ª–µ—Ç–∞–µ—Ç")
                
                # –õ–∏–¥–µ—Ä –Ω–µ –ª–µ—Ç–∏—Ç, –∞ —á–ª–µ–Ω –ª–µ—Ç–∏—Ç
                elif leader_fly_status != 1 and member_fly_status == 1:
                    member.set_flight_state(False)
                    logging.debug(f"üö∂ {member.char_base.char_name} –ø—Ä–∏–∑–µ–º–ª—è–µ—Ç—Å—è")
            
            # –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–ï –í–´–°–û–¢–´
            if leader_fly_status == 1:  # –õ–∏–¥–µ—Ä –ª–µ—Ç–∏—Ç
                if z_diff > 1.0:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1–º
                    # –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –≤—ã—Å–æ—Ç—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ª–∏–¥–µ—Ä–∞
                    if not member.fly_freeze_info or not member.fly_freeze_info.get('active'):
                        # –ú–æ—Ä–æ–∑–∏–º
                        freeze_info = member.memory.freeze_address(
                            member.char_base.cache["char_base"] + 0x9FC,  # char_pos_z
                            leader_z
                        )
                        
                        if freeze_info:
                            member.fly_freeze_info = freeze_info
                            member.char_base.set_fly_speed_z(0)
                            active_corrections += 1
                            logging.debug(f"‚ùÑÔ∏è {member.char_base.char_name} –∑–∞–º–æ—Ä–æ–∂–µ–Ω –Ω–∞ –≤—ã—Å–æ—Ç–µ {leader_z:.1f}")
                else:
                    # –í—ã—Å–æ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã - —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –µ—Å–ª–∏ –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω
                    if member.fly_freeze_info and member.fly_freeze_info.get('active'):
                        member.memory.unfreeze_address(member.fly_freeze_info)
                        member.fly_freeze_info = None
                        member.char_base.set_fly_speed_z(0)
                        logging.debug(f"üîì {member.char_base.char_name} —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω")
            else:
                # –õ–∏–¥–µ—Ä –Ω–µ –ª–µ—Ç–∏—Ç - —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –≤—Å–µ—Ö
                if member.fly_freeze_info and member.fly_freeze_info.get('active'):
                    member.memory.unfreeze_address(member.fly_freeze_info)
                    member.fly_freeze_info = None
                    member.char_base.set_fly_speed_z(0)
        
        return active_corrections
    
    # ===================================================
    # ATTACK (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    # ===================================================
    
    def set_attack_target(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç –ª–∏–¥–µ—Ä–∞ –≤—Å–µ–º —á–ª–µ–Ω–∞–º –≥—Ä—É–ø–ø—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
        """
        leader, group = self.get_leader_and_group()
        
        if not leader or len(group) <= 1:
            return 0
        
        leader.char_base.refresh()
        leader_target_id = leader.char_base.target_id
        
        if not leader_target_id or leader_target_id == 0:
            return 0
        
        success_count = 0
        
        for member in group:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥–µ—Ä–∞
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_id
            if member.char_base.set_target_id(leader_target_id):
                success_count += 1
        
        return success_count