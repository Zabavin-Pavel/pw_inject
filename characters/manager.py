"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–û
"""
import ctypes
import logging
import math
from game.memory import Memory
from game.structs import CharBase, WorldManager
from characters.character import Character
from config.constants import DUNGEON_POINTS, LOOT_CHECK_RADIUS
from game.win32_api import TH32CS_SNAPPROCESS, PROCESSENTRY32
from game.offsets import resolve_offset, OFFSETS

class MultiboxManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self):
        self.characters = {}
        self.kernel32 = ctypes.windll.kernel32
        
        # WorldManager –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.world_manager = None
        self._main_pid = None
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.ahk_manager = None
        self.app_state = None
        self.action_limiter = None
    
        # –ù–û–í–û–ï: –ö–µ—à –¥–ª—è REDO —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        self.last_teleport_destination = None  # (x, y, z)
    
        # –ù–û–í–û–ï: –ö–µ—à –≥—Ä—É–ø–ø—ã (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è Attack –∫–∞–∂–¥—ã–µ 500ms)
        self.party_cache = {
            'timestamp': None,
            'leader': None,
            'members': [],
            'member_info': {}
        }

        # –ù–û–í–û–ï: –ö–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.quick_check_cache = {
            'pids': set(),           # –¢–µ–∫—É—â–∏–µ PIDs
            'char_ids': {},          # {pid: char_id}
            'party_states': {},      # {pid: party_ptr –∏–ª–∏ 0}
            'timestamp': 0
        }
    
        # –ù–û–í–û–ï: –ï–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–ª—è Follow
        self.freeze_thread = None
        self.freeze_stop_event = None
        self.freeze_targets = {}

    def needs_refresh(self) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω—É–∂–µ–Ω –ª–∏ refresh?
        
        –í–ê–ñ–ù–û: –ï—Å–ª–∏ –í–°–ï –æ–∫–Ω–∞ –Ω–∞ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (char_id = 0) - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        """
        import time
        
        current_pids = set(self._get_all_pids())
        cached_pids = self.quick_check_cache['pids']
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ PIDs (–Ω–æ–≤—ã–µ/–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞)
        if current_pids != cached_pids:
            logging.info(f"üîÑ PIDs changed: {len(cached_pids)} -> {len(current_pids)}")
            return True
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–∫–Ω–æ –ù–ï –Ω–∞ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        from game.offsets import resolve_offset, OFFSETS
        
        has_valid_chars = False
        
        for pid in current_pids:
            if pid not in self.characters:
                continue
            
            char = self.characters[pid]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            if not char.is_valid():
                logging.info(f"üîÑ PID {pid} became invalid")
                return True
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π char_id
            char_base = char.char_base.cache.get("char_base")
            if not char_base:
                continue
            
            current_char_id = char.memory.read_int(char_base + 0x6A8)
            
            # –ï—Å–ª–∏ char_id –≤–∞–ª–∏–¥–µ–Ω - –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –∏–≥—Ä–µ
            if current_char_id and current_char_id != 0:
                has_valid_chars = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ char_id –Ω–µ –æ–±–Ω—É–ª–∏–ª—Å—è
            if current_char_id is None or current_char_id == 0:
                cached_char_id = self.quick_check_cache['char_ids'].get(pid)
                if cached_char_id and cached_char_id != 0:
                    logging.info(f"üîÑ Char ID became 0 for PID {pid} (character select)")
                    return True
                continue
            
            cached_char_id = self.quick_check_cache['char_ids'].get(pid)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if current_char_id != cached_char_id:
                if cached_char_id is not None and cached_char_id != 0:
                    logging.info(f"üîÑ Char ID changed for PID {pid}: {cached_char_id} -> {current_char_id}")
                    return True
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π party_ptr
            char_origin = char.char_base.cache.get("char_origin")
            if char_origin:
                party_ptr_addr = char_base + 0xAA0
                current_party_ptr = char.memory.read_uint64(party_ptr_addr)
                
                if current_party_ptr is None:
                    continue
                
                cached_party_ptr = self.quick_check_cache['party_states'].get(pid, 0)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
                if (current_party_ptr == 0) != (cached_party_ptr == 0):
                    logging.info(f"üîÑ Party state changed for PID {pid}")
                    return True
        
        # –ù–û–í–û–ï: –ï—Å–ª–∏ –ù–ï–¢ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–≤—Å–µ –Ω–∞ –≤—ã–±–æ—Ä–µ) - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if not has_valid_chars:
            logging.debug("‚è∏Ô∏è All characters on character select - skip refresh")
            return False
        
        return False

    def update_quick_check_cache(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ refresh"""
        import time
        from game.offsets import resolve_offset, OFFSETS
        
        self.quick_check_cache['pids'] = set(self.characters.keys())
        self.quick_check_cache['char_ids'].clear()
        self.quick_check_cache['party_states'].clear()
        
        for pid, char in self.characters.items():
            if not char.is_valid():
                continue
            
            # –ù–û–í–û–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ char_id
            char_id = char.char_base.char_id
            if char_id is None or char_id == 0:
                continue
            
            self.quick_check_cache['char_ids'][pid] = char_id
            
            # –ö–µ—à–∏—Ä—É–µ–º party_ptr
            char_base = char.char_base.cache.get("char_base")
            if char_base:
                try:
                    party_ptr = resolve_offset(
                        char.memory,
                        OFFSETS["party_ptr"],
                        char.char_base.cache
                    )
                    self.quick_check_cache['party_states'][pid] = party_ptr or 0
                except Exception as e:
                    logging.debug(f"Failed to read party_ptr for PID {pid}: {e}")
                    continue
        
        self.quick_check_cache['timestamp'] = time.time()
        logging.debug(f"‚úÖ Quick check cache updated: {len(self.quick_check_cache['pids'])} PIDs")

    def start_follow_freeze(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–ª—è Follow"""
        if self.freeze_thread and self.freeze_thread.is_alive():
            return
        
        import threading
        import time
        
        self.freeze_stop_event = threading.Event()
        self.freeze_targets = {}
        
        def freeze_loop():
            while not self.freeze_stop_event.is_set():
                for pid, target in list(self.freeze_targets.items()):
                    if pid in self.characters:
                        char = self.characters[pid]
                        char.memory.write_float(target['address'], target['value'])
                
                time.sleep(0.05)
        
        self.freeze_thread = threading.Thread(target=freeze_loop, daemon=True)
        self.freeze_thread.start()

    def stop_follow_freeze(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫ –∑–∞–º–æ—Ä–æ–∑–∫–∏"""
        if self.freeze_stop_event:
            self.freeze_stop_event.set()
        self.freeze_targets = {}
        self.freeze_thread = None

    def set_ahk_manager(self, ahk_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.ahk_manager = ahk_manager
    
    def set_app_state(self, app_state):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å app_state"""
        self.app_state = app_state
    
    def set_action_limiter(self, action_limiter):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å action_limiter"""
        self.action_limiter = action_limiter
    
    def _get_all_pids(self, process_name="ElementClient.exe"):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PID –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        snapshot = self.kernel32.CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
        pe32 = PROCESSENTRY32()
        pe32.dwSize = ctypes.sizeof(PROCESSENTRY32)
        
        pids = []
        
        if self.kernel32.Process32First(snapshot, ctypes.byref(pe32)):
            while True:
                current_name = pe32.szExeFile.decode('utf-8', errors='ignore')
                if current_name.lower() == process_name.lower():
                    pids.append(pe32.th32ProcessID)
                
                if not self.kernel32.Process32Next(snapshot, ctypes.byref(pe32)):
                    break
        
        self.kernel32.CloseHandle(snapshot)
        return pids
    
    def validate_all(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        to_remove = []
        
        for pid, char in self.characters.items():
            if not char.is_valid():
                char.memory.close()
                to_remove.append(pid)
        
        for pid in to_remove:
            del self.characters[pid]
    
    def refresh(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        current_pids = set(self._get_all_pids())
        existing_pids = set(self.characters.keys())
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in existing_pids - current_pids:
            char = self.characters[pid]
            char.memory.close()
            del self.characters[pid]
            
            if pid == self._main_pid:
                self.world_manager = None
                self._main_pid = None
        
        # –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º char_id (–≤—ã—Ö–æ–¥ –Ω–∞ –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
        to_remove = []
        for pid, char in list(self.characters.items()):
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ char_id –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ refresh
            char_base = char.char_base.cache.get("char_base")
            if char_base:
                current_char_id = char.memory.read_int(char_base + 0x6A8)
                if current_char_id is None or current_char_id == 0:
                    logging.info(f"üö™ PID {pid} –Ω–∞ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞")
                    to_remove.append(pid)
        
        for pid in to_remove:
            char = self.characters[pid]
            # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–º—è—Ç—å (–ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
            del self.characters[pid]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        to_recreate = []
        for pid, char in list(self.characters.items()):
            char.char_base.refresh()
            
            if not char.char_base.is_valid():
                to_recreate.append(pid)
                continue
            
            if char.char_base._previous_char_id != char.char_base.char_id:
                logging.info(f"üîÑ Character changed in PID {pid}, recreating...")
                to_recreate.append(pid)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º fly trigger –∫–µ—à
                char.update_fly_trigger_cache()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
        for pid in to_recreate:
            old_char = self.characters[pid]
            char_base = CharBase(old_char.memory)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            if not char_base.is_valid():
                logging.warning(f"‚ö†Ô∏è PID {pid} CharBase invalid after recreate, removing")
                del self.characters[pid]
                continue
            
            new_char = Character(pid, old_char.memory, char_base)
            new_char.manager = self
            self.characters[pid] = new_char
            
            char_name = char_base.char_name if char_base.char_name else "???"
            logging.info(f"‚úÖ Character recreated for PID {pid}: {char_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in current_pids - existing_pids:
            mem = Memory()
            if mem.attach_by_pid(pid):
                char_base = CharBase(mem)

                # –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ù–û–°–¢–ò –î–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø
                if not char_base.is_valid():
                    logging.warning(f"‚ö†Ô∏è PID {pid} attached but character data is invalid, skipping")
                    mem.close()
                    continue

                logging.info(f"DEBUG PID={pid}: char_origin={hex(char_base.cache.get('char_origin', 0))}, char_base={hex(char_base.cache.get('char_base', 0))}")
                char = Character(pid, mem, char_base)
                char.manager = self
                self.characters[pid] = char
                
                if self._main_pid is None:
                    self._main_pid = pid
                    self.world_manager = WorldManager(mem)
                
                char_name = char_base.char_name if char_base.char_name else "???"
                logging.info(f"‚úÖ New character added: PID={pid}, Name={repr(char_name)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø—É pid‚Üîchar_id
        if self.app_state:
            self.app_state.update_pid_char_id_map(self.get_all_characters())
            logging.debug(f"üîÑ Map updated: {self.app_state.char_id_to_pid}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.update_quick_check_cache()
        
        # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º last_active_character –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω
        if self.app_state and self.app_state.last_active_character:
            active_pid = self.app_state.last_active_character.pid
            if active_pid not in self.characters:
                logging.info(f"üö™ Last active character (PID {active_pid}) removed, clearing")
                self.app_state.last_active_character = None
                
    def refresh_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è refresh()"""
        self.refresh()
    
    def get_all_characters(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ê–õ–ò–î–ù–´–• –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        valid_chars = []
        for char in self.characters.values():
            if char.is_valid():
                valid_chars.append(char)
        return valid_chars
    
    def get_valid_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI"""
        return self.get_all_characters()
    
    # ===================================================
    # –ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê GET_LEADER_AND_GROUP
    # ===================================================
    def get_leader_and_group(self):
        """
        –ù–∞–π—Ç–∏ –ª–∏–¥–µ—Ä–∞ –∏ –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ê–ö–¢–ò–í–ù–û–ì–û –æ–∫–Ω–∞
        
        –õ–æ–≥–∏–∫–∞:
        1. –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        2. –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        3. –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∏–∑ –≥—Ä—É–ø–ø—ã
        
        Returns:
            (leader, group): –ª–∏–¥–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        from game.offsets import resolve_offset, OFFSETS
        
        # –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        active_char = self.app_state.last_active_character if self.app_state else None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if not active_char or not active_char.is_valid():
            return None, []
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        try:
            active_char.char_base.refresh()
        except:
            if self.app_state:
                self.app_state.last_active_character = None
            return None, []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ char_id
        if not active_char.char_base.char_id or active_char.char_base.char_id == 0:
            if self.app_state:
                self.app_state.last_active_character = None
            return None, []
        
        active_char_id = active_char.char_base.char_id
        
        # –ß–∏—Ç–∞–µ–º party_ptr –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        party_ptr = resolve_offset(
            active_char.memory,
            OFFSETS["party_ptr"],
            active_char.char_base.cache
        )
        
        # –ù–µ—Ç –≥—Ä—É–ø–ø—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        if not party_ptr or party_ptr == 0:
            return active_char, [active_char]
        
        active_char.char_base.cache["party_ptr"] = party_ptr
        
        # –ß–∏—Ç–∞–µ–º party_leader_id
        party_leader_id = resolve_offset(
            active_char.memory,
            OFFSETS["party_leader_id"],
            active_char.char_base.cache
        )
        
        if not party_leader_id or party_leader_id == 0:
            return active_char, [active_char]
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫—Ç–æ –≤ –≥—Ä—É–ø–ø–µ (–≤–∫–ª—é—á–∞—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
        all_chars = self.get_all_characters()
        group_members = []
        
        for char in all_chars:
            char.char_base.refresh()
            
            # –ß–∏—Ç–∞–µ–º party_ptr
            char_party_ptr = resolve_offset(
                char.memory,
                OFFSETS["party_ptr"],
                char.char_base.cache
            )
            
            if not char_party_ptr or char_party_ptr == 0:
                continue
            
            char.char_base.cache["party_ptr"] = char_party_ptr
            
            # –ß–∏—Ç–∞–µ–º party_leader_id
            char_party_leader_id = resolve_offset(
                char.memory,
                OFFSETS["party_leader_id"],
                char.char_base.cache
            )
            
            # –ï—Å–ª–∏ –ª–∏–¥–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            if char_party_leader_id == party_leader_id:
                group_members.append(char)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–∫ "–ª–∏–¥–µ—Ä–∞" –∏ –≤—Å—é –≥—Ä—É–ø–ø—É
        return active_char, group_members

    # ===================================================
    # –¢–ò–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò (–° –ü–†–û–í–ï–†–ö–û–ô –õ–ò–¶–ï–ù–ó–ò–ò)
    # ===================================================
    
    def teleport_character(self, character, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            character: –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            bool: –≤—Å–µ–≥–¥–∞ True (–ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—Ç)
        """
        if not character or not character.is_valid():
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        character.char_base.set_position(target_x, target_y, target_z)
        import time
        # –ù–∞–∂–∏–º–∞–µ–º space –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–û–î–ò–ù–û–ß–ù–´–ô)
        if send_space and self.ahk_manager:
            self.ahk_manager.send_key("Space")
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._check_license_expiry()
        
        return True
    
    def teleport_group(self, characters, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            characters: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        if not characters:
            return 0
        
        success_count = 0
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ–º (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        for char in characters:
            if char.is_valid():
                char.char_base.set_position(target_x, target_y, target_z)
                success_count += 1
        
        # –ù–∞–∂–∏–º–∞–µ–º space –í–°–ï–ú –°–†–ê–ó–£ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ú–ê–°–°–û–í–´–ô)
        if send_space and success_count > 0 and self.ahk_manager:
            self.ahk_manager.send_key("space")
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._check_license_expiry()
        
        return success_count
    
    def _check_license_expiry(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
        –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π refresh GUI
        """
        try:
            from core.license_manager import LicenseManager
            from datetime import datetime
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ license_config –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ GUI
            # –≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–¥–ª—è—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LicenseManager
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            
        except Exception as e:
            logging.debug(f"License check skipped: {e}")
    
    # ===================================================
    # –≠–ö–®–ï–ù–´ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
    # ===================================================
    
    def action_teleport_to_target(self, character):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –µ–≥–æ —Ç–∞—Ä–≥–µ—Ç—É (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        """
        if not character:
            return False
        
        target_pos = character.char_base.get_target_position()
        
        if not target_pos:
            return False
        
        target_x, target_y, target_z = target_pos
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å +2 –∫ Z (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        self.teleport_character(
            character, 
            target_x, 
            target_y, 
            target_z + 2,
            send_space=False
        )
        
        return True
    
    def tp_to_leader(self):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –∫ –ª–∏–¥–µ—Ä—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        """
        leader, group = self.get_leader_and_group()
        
        if not leader:
            logging.warning("TP to LIDER: No valid leader found")
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_x = leader.char_base.char_pos_x
        leader_y = leader.char_base.char_pos_y
        leader_z = leader.char_base.char_pos_z
        
        if leader_x is None or leader_y is None or leader_z is None:
            logging.error("TP to LIDER: Failed to read leader position")
            return 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–ª–µ–Ω–æ–≤ (–±–µ–∑ –ª–∏–¥–µ—Ä–∞, –≤ —Ä–∞–¥–∏—É—Å–µ 300–º)
        members_to_tp = []
        
        for member in group:
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            member_x = member.char_base.char_pos_x
            member_y = member.char_base.char_pos_y
            member_z = member.char_base.char_pos_z
            
            if member_x is None or member_y is None or member_z is None:
                continue
            
            distance = math.sqrt(
                (member_x - leader_x)**2 + 
                (member_y - leader_y)**2 + 
                (member_z - leader_z)**2
            )
            
            if distance <= 300:
                members_to_tp.append(member)
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        return self.teleport_group(
            members_to_tp, 
            leader_x, 
            leader_y, 
            leader_z + 0.5,
            send_space=True
        )
    
    def tp_to_point(self, point_name):
        """
        –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞ –∫ —Ç–æ—á–∫–µ (SO, GO –∏ —Ç.–¥.)
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        """
        active_char = self.app_state.last_active_character if self.app_state else None
        
        if not active_char:
            logging.warning(f"TP to {point_name}: No active character")
            return False
        
        # –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏
        point = None
        for p in DUNGEON_POINTS:
            if p["name"] == point_name:
                point = p
                break
        
        if not point:
            logging.error(f"TP to {point_name}: Point not found")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        active_char.char_base.refresh()
        char_x = active_char.char_base.char_pos_x
        char_y = active_char.char_base.char_pos_y
        
        if char_x is None or char_y is None:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger_x, trigger_y = point["trigger"]
        radius = point["radius"]
        
        dx = abs(char_x - trigger_x)
        dy = abs(char_y - trigger_y)
        
        if dx <= radius and dy <= radius:
            # –í –∑–æ–Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º (–° –û–î–ò–ù–û–ß–ù–´–ú SPACE)
            target_x, target_y, target_z = point["target"]
            return self.teleport_character(
                active_char, 
                target_x, 
                target_y, 
                target_z,
                send_space=True
            )
        else:
            char_name = active_char.char_base.char_name
            logging.info(f"TP to {point_name}: {char_name} not in trigger zone (dx={dx:.1f}, dy={dy:.1f})")
            return False

    # ===================================================
    # FOLLOW (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∫–æ–Ω –≤ –ø–∞—Ç–∏, —Å –ª–∏–¥–µ—Ä–æ–º
    # ===================================================
    
    def follow_leader(self):
        """Follow —Å –µ–¥–∏–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –∑–∞–º–æ—Ä–æ–∑–∫–∏"""
        cache = self._get_party_cache()
        
        leader = cache['leader']
        members = cache['members']
        
        if not leader or len(members) <= 1:
            return 0
        
        leader.char_base.refresh()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: fly_status == 2
        if leader.char_base.fly_status != 2:
            # –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –≤—Å–µ—Ö
            for member in members:
                if member.char_base.char_id == leader.char_base.char_id:
                    continue
                
                if member.pid in self.freeze_targets:
                    del self.freeze_targets[member.pid]
                
                member.char_base.set_fly_speed_z(0)
            
            return 0
        
        leader_z = leader.char_base.char_pos_z
        
        if leader_z is None:
            return 0
        
        print(f"\n[FOLLOW] –õ–∏–¥–µ—Ä={leader.char_base.char_name} Z={leader_z:.1f}")

        for member in members:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥–µ—Ä–∞
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            
            member_z = member.char_base.char_pos_z
            member_fly_speed = member.char_base.fly_speed
            
            if member_z is None or member_fly_speed is None:
                print(f"  {member.char_base.char_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            z_diff = member_z - leader_z
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ > 1–º
            if abs(z_diff) > 2:
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                target_speed_z = member_fly_speed if z_diff < 0 else -member_fly_speed
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–º–æ—Ä–æ–∑–∫—É
                char_base_addr = member.char_base.cache.get("char_base")
                fly_speed_z_address = char_base_addr + 0x12A8
                
                self.freeze_targets[member.pid] = {
                    'address': fly_speed_z_address,
                    'value': target_speed_z
                }
                
                print(f"  {member.char_base.char_name} (PID={member.pid}): diff={z_diff:+.1f}–º ‚Üí –∑–∞–º–æ—Ä–æ–∂–µ–Ω –Ω–∞ {target_speed_z:+.1f} @ {hex(fly_speed_z_address)}")
            else:
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –∑–∞–º–æ—Ä–æ–∑–∫–∏
                if member.pid in self.freeze_targets:
                    del self.freeze_targets[member.pid]
                
                # –°—Ç–∞–≤–∏–º 0
                member.char_base.set_fly_speed_z(0)
                print(f"  {member.char_base.char_name}: OK (diff={z_diff:+.1f}–º)")
        
        print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫: {len(self.freeze_targets)}")
        
        return len(self.freeze_targets)
            
    # ===================================================
    # ATTACK (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    # ===================================================
    

    def set_attack_target(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç –ª–∏–¥–µ—Ä–∞ –≤—Å–µ–º –æ–∫–Ω–∞–º (–ò–°–ü–û–õ–¨–ó–£–ï–¢ –ö–ï–®)
        
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≥—Ä—É–ø–ø—ã –∫–∞–∂–¥—ã–π —Ç–∏–∫.
        """
        # –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        self._update_party_cache()
        
        cache = self.party_cache
        leader = cache['leader']
        members = cache['members']
        
        if not leader or len(members) <= 1:
            return 0
        
        # –ß–∏—Ç–∞–µ–º target_id —É –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_target_id = leader.char_base.target_id
        
        if not leader_target_id or leader_target_id == 0:
            return 0
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_id –í–°–ï–ú –æ–∫–Ω–∞–º (–∫—Ä–æ–º–µ –ª–∏–¥–µ—Ä–∞)
        success_count = 0
        
        for char in members:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥–µ—Ä–∞
            if char.pid == leader.pid:
                continue
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_id
            if char.char_base.set_target_id(leader_target_id):
                success_count += 1
        
        if success_count > 0:
            logging.info(f"‚öîÔ∏è Attack: set target {leader_target_id} to {success_count} windows")
        
        return success_count