"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–û
"""
import ctypes
import logging
import math
from game.memory import Memory
from game.structs import CharBase, WorldManager
from characters.character import Character
from config.constants import DUNGEON_POINTS, LOOT_CHECK_RADIUS
from game.win32_api import TH32CS_SNAPPROCESS, PROCESSENTRY32
from game.offsets import resolve_offset, OFFSETS


def __init__(self):
    self.characters = {}
    self.kernel32 = ctypes.windll.kernel32
    
    # WorldManager –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    self.world_manager = None
    self._main_pid = None
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    self.ahk_manager = None
    self.app_state = None
    self.action_limiter = None
    
    # –ù–û–í–û–ï: –ö–µ—à –≥—Ä—É–ø–ø—ã (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è Attack –∫–∞–∂–¥—ã–µ 500ms)
    self.party_cache = {
        'timestamp': None,  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        'leader': None,  # Character –æ–±—ä–µ–∫—Ç –ª–∏–¥–µ—Ä–∞
        'members': [],  # —Å–ø–∏—Å–æ–∫ Character –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        'member_info': {}  # {char_id: {'pid': ..., 'location_id': ..., 'name': ...}}
    }

    def _update_party_cache(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –≥—Ä—É–ø–ø—ã
        
        –ß–∏—Ç–∞–µ—Ç party_ptr, leader_id, —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è Attack –∫–∞–∂–¥—ã–π —Ç–∏–∫ (500ms).
        """
        import time
        from game.offsets import resolve_offset, OFFSETS
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à
        self.party_cache['leader'] = None
        self.party_cache['members'] = []
        self.party_cache['member_info'] = {}
        
        all_chars = self.get_all_characters()
        
        if not all_chars:
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è party_leader_id
        first_char = all_chars[0]
        first_char.char_base.refresh()
        
        # –ß–∏—Ç–∞–µ–º party_ptr
        party_ptr = resolve_offset(
            first_char.memory,
            OFFSETS["party_ptr"],
            first_char.char_base.cache
        )
        
        if not party_ptr or party_ptr == 0:
            # –ù–µ—Ç –ø–∞—Ç–∏
            self.party_cache['timestamp'] = time.time()
            return
        
        # –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –ö–ï–®
        first_char.char_base.cache["party_ptr"] = party_ptr
        
        # –ß–∏—Ç–∞–µ–º party_leader_id
        party_leader_id = resolve_offset(
            first_char.memory,
            OFFSETS["party_leader_id"],
            first_char.char_base.cache
        )
        
        if not party_leader_id or party_leader_id == 0:
            self.party_cache['timestamp'] = time.time()
            return
        
        # –ò—â–µ–º –ª–∏–¥–µ—Ä–∞ (–±—ã—Å—Ç—Ä–æ —á–µ—Ä–µ–∑ map)
        leader = None
        
        if self.app_state:
            leader_pid = self.app_state.get_pid_by_char_id(party_leader_id)
            if leader_pid and leader_pid in self.characters:
                leader = self.characters[leader_pid]
        
        # Fallback: –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é
        if not leader:
            for char in all_chars:
                char.char_base.refresh()
                if char.char_base.char_id == party_leader_id:
                    leader = char
                    break
        
        if not leader:
            self.party_cache['timestamp'] = time.time()
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã (–≤—Å–µ –æ–∫–Ω–∞ —Å party_ptr != 0)
        members = []
        
        for char in all_chars:
            char.char_base.refresh()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º party_ptr
            char_party_ptr = resolve_offset(
                char.memory,
                OFFSETS["party_ptr"],
                char.char_base.cache
            )
            
            if not char_party_ptr or char_party_ptr == 0:
                continue
            
            char.char_base.cache["party_ptr"] = char_party_ptr
            
            members.append(char)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º member_info
            self.party_cache['member_info'][char.char_base.char_id] = {
                'pid': char.pid,
                'location_id': char.char_base.location_id,
                'name': char.char_base.char_name
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        self.party_cache['leader'] = leader
        self.party_cache['members'] = members
        self.party_cache['timestamp'] = time.time()
        
        print(f"üîÑ Party cache updated: leader={leader.char_base.char_name}, members={len(members)}")

    def _get_party_cache(self, force_update=False):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à –≥—Ä—É–ø–ø—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            force_update: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
        
        Returns:
            dict: party_cache
        """
        import time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (1 —Å–µ–∫—É–Ω–¥–∞)
        if force_update or not self.party_cache['timestamp'] or (time.time() - self.party_cache['timestamp']) > 1.0:
            self._update_party_cache()
        
        return self.party_cache

    def set_ahk_manager(self, ahk_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AHK –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.ahk_manager = ahk_manager
    
    def set_app_state(self, app_state):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å app_state"""
        self.app_state = app_state
    
    def set_action_limiter(self, action_limiter):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å action_limiter"""
        self.action_limiter = action_limiter
    
    def _get_all_pids(self, process_name="ElementClient.exe"):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PID –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        snapshot = self.kernel32.CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
        pe32 = PROCESSENTRY32()
        pe32.dwSize = ctypes.sizeof(PROCESSENTRY32)
        
        pids = []
        
        if self.kernel32.Process32First(snapshot, ctypes.byref(pe32)):
            while True:
                current_name = pe32.szExeFile.decode('utf-8', errors='ignore')
                if current_name.lower() == process_name.lower():
                    pids.append(pe32.th32ProcessID)
                
                if not self.kernel32.Process32Next(snapshot, ctypes.byref(pe32)):
                    break
        
        self.kernel32.CloseHandle(snapshot)
        return pids
    
    def validate_all(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        to_remove = []
        
        for pid, char in self.characters.items():
            if not char.is_valid():
                char.memory.close()
                to_remove.append(pid)
        
        for pid in to_remove:
            del self.characters[pid]
    
    def refresh(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        current_pids = set(self._get_all_pids())
        existing_pids = set(self.characters.keys())
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in existing_pids - current_pids:
            char = self.characters[pid]
            char.memory.close()
            del self.characters[pid]
            
            if pid == self._main_pid:
                self.world_manager = None
                self._main_pid = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        to_recreate = []
        for pid, char in list(self.characters.items()):
            char.char_base.refresh()
            
            if not char.char_base.is_valid():
                to_recreate.append(pid)
                continue
            
            if char.char_base._previous_char_id != char.char_base.char_id:
                logging.info(f"üîÑ Character changed in PID {pid}, recreating...")
                to_recreate.append(pid)
            else:
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º fly trigger –∫–µ—à (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–µ–Ω—è–ª—Å—è)
                char.update_fly_trigger_cache()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)
        for pid in to_recreate:
            old_char = self.characters[pid]
            char_base = CharBase(old_char.memory)
            new_char = Character(pid, old_char.memory, char_base)
            self.characters[pid] = new_char
            logging.info(f"‚úÖ Character recreated for PID {pid}: {char_base.char_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for pid in current_pids - existing_pids:
            mem = Memory()
            if mem.attach_by_pid(pid):
                char_base = CharBase(mem)
                logging.info(f"DEBUG PID={pid}: char_origin={hex(char_base.cache.get('char_origin', 0))}, char_base={hex(char_base.cache.get('char_base', 0))}")
                char = Character(pid, mem, char_base)
                self.characters[pid] = char
                
                if self._main_pid is None:
                    self._main_pid = pid
                    self.world_manager = WorldManager(mem)
                
                char_name = char_base.char_name if char_base.char_name else "???"
                logging.info(f"‚úÖ New character added: PID={pid}, Name={repr(char_name)}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø—É pid‚Üîchar_id –í–°–ï–ì–î–ê –≤ –∫–æ–Ω—Ü–µ refresh
        if self.app_state:
            self.app_state.update_pid_char_id_map(self.get_all_characters())
            logging.debug(f"üîÑ Map updated: {self.app_state.char_id_to_pid}")
    
    def refresh_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è refresh()"""
        self.refresh()
    
    def get_all_characters(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ê–õ–ò–î–ù–´–• –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        valid_chars = []
        for char in self.characters.values():
            if char.is_valid():
                valid_chars.append(char)
        return valid_chars
    
    def get_valid_characters(self):
        """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GUI"""
        return self.get_all_characters()
    
    # ===================================================
    # –ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê GET_LEADER_AND_GROUP
    # ===================================================
    
    def get_leader_and_group(self):
        """
        –ù–∞–π—Ç–∏ –ª–∏–¥–µ—Ä–∞ –∏ –≥—Ä—É–ø–ø—É —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –æ–∫–æ–Ω (–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê)
        
        Returns:
            (leader, group): –ª–∏–¥–µ—Ä –∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã, –∏–ª–∏ (None, [])
        """
        print("\nüîç get_leader_and_group() –≤—ã–∑–≤–∞–Ω")
        print(f"   –í—Å–µ–≥–æ –æ–∫–æ–Ω: {len(self.characters)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        valid_chars = []
        
        for pid, char in self.characters.items():
            print(f"\n   --- PID {pid} ---")
            
            if not char.char_base.is_valid():
                print(f"   ‚ùå –ù–µ –≤–∞–ª–∏–¥–µ–Ω")
                continue
            
            char.char_base.refresh()
            
            char_name = char.char_base.char_name
            char_id = char.char_base.char_id
            # –î–û–õ–ñ–ù–û –ë–´–¢–¨ (–∫–∞–∫ –≤ attack):
            party_ptr = resolve_offset(
                char.memory, 
                OFFSETS["party_ptr"], 
                char.char_base.cache
            )

            if not party_ptr or party_ptr == 0:
                print(f"   ‚ùå –ù–µ—Ç party_ptr")
                continue

            # –ó–ê–ü–ò–°–ê–¢–¨ –í –ö–ï–®!
            char.char_base.cache["party_ptr"] = party_ptr
            
            print(f"   –ò–º—è: {char_name}")
            print(f"   ID: {char_id}")
            print(f"   party_ptr: {hex(party_ptr) if party_ptr else 'NULL'}")
            
            if not party_ptr or party_ptr == 0:
                print(f"   ‚ùå –ù–µ—Ç party_ptr")
                continue
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            from game.offsets import resolve_offset, OFFSETS
            
            party_leader_id = resolve_offset(char.memory, OFFSETS["party_leader_id"], char.char_base.cache)
            party_count = resolve_offset(char.memory, OFFSETS["party_count"], char.char_base.cache)
            
            print(f"   party_leader_id: {party_leader_id}")
            print(f"   party_count: {party_count}")
            
            if not party_leader_id or party_leader_id == 0:
                print(f"   ‚ùå –ù–µ—Ç –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã")
                continue
            
            if not party_count or party_count <= 0:
                print(f"   ‚ùå –ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞—è")
                continue
            
            print(f"   ‚úÖ –í –≥—Ä—É–ø–ø–µ")
            valid_chars.append(char)
        
        print(f"\nüìä –í–∞–ª–∏–¥–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –≥—Ä—É–ø–ø–µ: {len(valid_chars)}")
        
        if not valid_chars:
            print("‚ùå –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –≥—Ä—É–ø–ø–µ")
            return None, []
        
        # –ò—â–µ–º –ª–∏–¥–µ—Ä–∞ —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –æ–∫–æ–Ω
        leader = None
        
        for char in valid_chars:
            char.char_base.refresh()
            party_leader_id = resolve_offset(char.memory, OFFSETS["party_leader_id"], char.char_base.cache)
            
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {char.char_base.char_name}:")
            print(f"   char_id: {char.char_base.char_id}")
            print(f"   party_leader_id: {party_leader_id}")
            
            if char.char_base.char_id == party_leader_id:
                leader = char
                print(f"   ‚úÖ –≠–¢–û –õ–ò–î–ï–†!")
                break
        
        if not leader:
            print("‚ùå –õ–∏–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –æ–∫–æ–Ω")
            return None, []
        
        print(f"\n‚úÖ –õ–∏–¥–µ—Ä –Ω–∞–π–¥–µ–Ω: {leader.char_base.char_name}")
        print(f"‚úÖ –ì—Ä—É–ø–ø–∞: {len(valid_chars)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        return leader, valid_chars
    
    # ===================================================
    # –¢–ò–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò (–° –ü–†–û–í–ï–†–ö–û–ô –õ–ò–¶–ï–ù–ó–ò–ò)
    # ===================================================
    
    def teleport_character(self, character, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            character: –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            bool: –≤—Å–µ–≥–¥–∞ True (–ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ—Ç)
        """
        if not character or not character.is_valid():
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        character.char_base.set_position(target_x, target_y, target_z)
        
        # –ù–∞–∂–∏–º–∞–µ–º space –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–û–î–ò–ù–û–ß–ù–´–ô)
        if send_space and self.ahk_manager:
            self.ahk_manager.send_key_to_pid("space", character.pid)
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._check_license_expiry()
        
        return True
    
    def teleport_group(self, characters, target_x, target_y, target_z, send_space=False):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ë–´–°–¢–†–û, –ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        
        Args:
            characters: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            target_x, target_y, target_z: —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            send_space: –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å space –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
        
        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        """
        if not characters:
            return 0
        
        success_count = 0
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ–º (–ë–ï–ó –ü–†–û–í–ï–†–û–ö)
        for char in characters:
            if char.is_valid():
                char.char_base.set_position(target_x, target_y, target_z)
                success_count += 1
        
        # –ù–∞–∂–∏–º–∞–µ–º space –í–°–ï–ú –°–†–ê–ó–£ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ú–ê–°–°–û–í–´–ô)
        if send_space and success_count > 0 and self.ahk_manager:
            self.ahk_manager.send_key("space")
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._check_license_expiry()
        
        return success_count
    
    def _check_license_expiry(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
        –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π refresh GUI
        """
        try:
            from core.license_manager import LicenseManager
            from datetime import datetime
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ license_config –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ GUI
            # –≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–¥–ª—è—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LicenseManager
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            
        except Exception as e:
            logging.debug(f"License check skipped: {e}")
    
    # ===================================================
    # –≠–ö–®–ï–ù–´ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
    # ===================================================
    
    def action_teleport_to_target(self, character):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –µ–≥–æ —Ç–∞—Ä–≥–µ—Ç—É (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        """
        if not character:
            return False
        
        target_pos = character.char_base.get_target_position()
        
        if not target_pos:
            return False
        
        target_x, target_y, target_z = target_pos
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å +2 –∫ Z (–ë–ï–ó space, –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫)
        self.teleport_character(
            character, 
            target_x, 
            target_y, 
            target_z + 2,
            send_space=False
        )
        
        return True
    
    def tp_to_leader(self):
        """
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã –∫ –ª–∏–¥–µ—Ä—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        """
        leader, group = self.get_leader_and_group()
        
        if not leader:
            logging.warning("TP to LIDER: No valid leader found")
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_x = leader.char_base.char_pos_x
        leader_y = leader.char_base.char_pos_y
        leader_z = leader.char_base.char_pos_z
        
        if leader_x is None or leader_y is None or leader_z is None:
            logging.error("TP to LIDER: Failed to read leader position")
            return 0
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–ª–µ–Ω–æ–≤ (–±–µ–∑ –ª–∏–¥–µ—Ä–∞, –≤ —Ä–∞–¥–∏—É—Å–µ 300–º)
        members_to_tp = []
        
        for member in group:
            if member.char_base.char_id == leader.char_base.char_id:
                continue
            
            member.char_base.refresh()
            member_x = member.char_base.char_pos_x
            member_y = member.char_base.char_pos_y
            member_z = member.char_base.char_pos_z
            
            if member_x is None or member_y is None or member_z is None:
                continue
            
            distance = math.sqrt(
                (member_x - leader_x)**2 + 
                (member_y - leader_y)**2 + 
                (member_z - leader_z)**2
            )
            
            if distance <= 300:
                members_to_tp.append(member)
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É (–° –ú–ê–°–°–û–í–´–ú SPACE)
        return self.teleport_group(
            members_to_tp, 
            leader_x, 
            leader_y, 
            leader_z + 0.5,
            send_space=True
        )
    
    def tp_to_point(self, point_name):
        """
        –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞ –∫ —Ç–æ—á–∫–µ (SO, GO –∏ —Ç.–¥.)
        –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        """
        active_char = self.app_state.last_active_character if self.app_state else None
        
        if not active_char:
            logging.warning(f"TP to {point_name}: No active character")
            return False
        
        # –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏
        point = None
        for p in DUNGEON_POINTS:
            if p["name"] == point_name:
                point = p
                break
        
        if not point:
            logging.error(f"TP to {point_name}: Point not found")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        active_char.char_base.refresh()
        char_x = active_char.char_base.char_pos_x
        char_y = active_char.char_base.char_pos_y
        
        if char_x is None or char_y is None:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger_x, trigger_y = point["trigger"]
        radius = point["radius"]
        
        dx = abs(char_x - trigger_x)
        dy = abs(char_y - trigger_y)
        
        if dx <= radius and dy <= radius:
            # –í –∑–æ–Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º (–° –û–î–ò–ù–û–ß–ù–´–ú SPACE)
            target_x, target_y, target_z = point["target"]
            return self.teleport_character(
                active_char, 
                target_x, 
                target_y, 
                target_z,
                send_space=True
            )
        else:
            char_name = active_char.char_base.char_name
            logging.info(f"TP to {point_name}: {char_name} not in trigger zone (dx={dx:.1f}, dy={dy:.1f})")
            return False

    # ===================================================
    # FOLLOW (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∫–æ–Ω –≤ –ø–∞—Ç–∏, –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏, —Å –ª–∏–¥–µ—Ä–æ–º
    # ===================================================
    
    def follow_leader(self):
        """
        –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–†–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ HP
        
        –í—ã–≤–æ–¥–∏–º:
        - fly_status –ª–∏–¥–µ—Ä–∞
        - —Ä–∞–∑–Ω–∏—Ü—É –ø–æ Z –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        - –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        """
        leader, group = self.get_leader_and_group()
        
        print("\n" + "="*60)
        print("FOLLOW TICK")
        
        if not leader:
            print("‚ùå –õ–∏–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 0
        
        if len(group) <= 1:
            print("‚ùå –ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä")
            return 0
        
        print(f"‚úÖ –õ–∏–¥–µ—Ä: {leader.char_base.char_name}")
        print(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(group)}")
        
        leader.char_base.refresh()
        
        leader_fly_status = leader.char_base.fly_status
        print(f"\nüîç FLY_STATUS –õ–ò–î–ï–†–ê: {leader_fly_status}")
        
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: fly_status == 2
        if leader_fly_status != 2:
            print(f"‚ùå fly_status != 2, –≤—ã—Ö–æ–¥ –∏–∑ follow")
            return 0
        
        print("‚úÖ fly_status == 2, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
        
        leader_z = leader.char_base.char_pos_z
        leader_location = leader.char_base.location_id
        
        print(f"üìç –õ–∏–¥–µ—Ä Z: {leader_z:.2f}, Location: {leader_location}")
        
        if leader_z is None or leader_location is None:
            print("‚ùå leader_z –∏–ª–∏ leader_location == None")
            return 0
        
        active_corrections = 0
        
        for i, member in enumerate(group):
            print(f"\n--- –£—á–∞—Å—Ç–Ω–∏–∫ #{i+1} ---")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥–µ—Ä–∞
            if member.char_base.char_id == leader.char_base.char_id:
                print("‚è≠Ô∏è –≠—Ç–æ –ª–∏–¥–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            member.char_base.refresh()
            
            print(f"üë§ –ò–º—è: {member.char_base.char_name}")
            print(f"üÜî ID: {member.char_base.char_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
            member_location = member.char_base.location_id
            print(f"üìç Location: {member_location} (–ª–∏–¥–µ—Ä: {leader_location})")
            
            if member_location != leader_location:
                print("‚ùå –†–∞–∑–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            print("‚úÖ –¢–∞ –∂–µ –ª–æ–∫–∞—Ü–∏—è")
            
            member_z = member.char_base.char_pos_z
            member_hp = member.char_base.char_hp
            
            print(f"üìç Z: {member_z:.2f} (–ª–∏–¥–µ—Ä: {leader_z:.2f})")
            print(f"‚ù§Ô∏è HP: {member_hp}")
            
            if member_z is None:
                print("‚ùå member_z == None")
                continue
            
            if member_hp is None:
                print("‚ùå member_hp == None")
                continue
            
            # –†–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—ã—Å–æ—Ç–µ
            z_diff = member_z - leader_z
            print(f"üìè –†–∞–∑–Ω–∏—Ü–∞ –ø–æ Z: {z_diff:.2f} –º")
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ > 1 –º–µ—Ç—Ä
            if abs(z_diff) > 1.0:
                print(f"‚úÖ |z_diff| > 1.0, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å HP")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–º–æ—Ä–æ–∑–∫–∞
                has_freeze = hasattr(member, 'hp_freeze') and member.hp_freeze and member.hp_freeze.get('active')
                print(f"üîç –£–∂–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω: {has_freeze}")
                
                if not has_freeze:
                    target_hp = member_hp * 2
                    print(f"‚ùÑÔ∏è –ú–û–†–û–ó–ò–ú HP: {member_hp} ‚Üí {target_hp}")
                    
                    char_base_addr = member.char_base.cache.get("char_base")
                    hp_offset = 0x6BC
                    hp_address = char_base_addr + hp_offset
                    
                    print(f"   –ê–¥—Ä–µ—Å char_base: {hex(char_base_addr)}")
                    print(f"   –ê–¥—Ä–µ—Å HP: {hex(hp_address)}")
                    
                    freeze_info = member.memory.freeze_address(hp_address, target_hp)
                    
                    if freeze_info:
                        member.hp_freeze = freeze_info
                        active_corrections += 1
                        print(f"‚úÖ HP —É—Å–ø–µ—à–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω!")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å HP")
                else:
                    print("‚è≠Ô∏è –£–∂–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                print(f"‚ùå |z_diff| <= 1.0, –Ω–µ –º–æ—Ä–æ–∑–∏–º")
                
                # –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º HP –µ—Å–ª–∏ –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω
                if hasattr(member, 'hp_freeze') and member.hp_freeze and member.hp_freeze.get('active'):
                    print(f"üîì –†–ê–ó–ú–û–†–ê–ñ–ò–í–ê–ï–ú HP")
                    member.memory.unfreeze_address(member.hp_freeze)
                    member.hp_freeze = None
                    print(f"‚úÖ HP —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω")
        
        print(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {active_corrections}")
        print("="*60 + "\n")
        
        return active_corrections
            
    # ===================================================
    # ATTACK (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    # ===================================================
    

    def set_attack_target(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç –ª–∏–¥–µ—Ä–∞ –≤—Å–µ–º –æ–∫–Ω–∞–º (–ò–°–ü–û–õ–¨–ó–£–ï–¢ –ö–ï–®)
        
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≥—Ä—É–ø–ø—ã –∫–∞–∂–¥—ã–π —Ç–∏–∫.
        """
        # –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        self._update_party_cache()
        
        cache = self.party_cache
        leader = cache['leader']
        members = cache['members']
        
        if not leader or len(members) <= 1:
            return 0
        
        # –ß–∏—Ç–∞–µ–º target_id —É –ª–∏–¥–µ—Ä–∞
        leader.char_base.refresh()
        leader_target_id = leader.char_base.target_id
        
        if not leader_target_id or leader_target_id == 0:
            return 0
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_id –í–°–ï–ú –æ–∫–Ω–∞–º (–∫—Ä–æ–º–µ –ª–∏–¥–µ—Ä–∞)
        success_count = 0
        
        for char in members:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥–µ—Ä–∞
            if char.pid == leader.pid:
                continue
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_id
            if char.char_base.set_target_id(leader_target_id):
                success_count += 1
        
        if success_count > 0:
            logging.info(f"‚öîÔ∏è Attack: set target {leader_target_id} to {success_count} windows")
        
        return success_count