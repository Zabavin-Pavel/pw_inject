"""
–°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—à–µ–Ω–æ–≤ —Å –¥–≤–æ–π–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∏—Ç–µ—Ä–æ–≤
"""
import hashlib
import json
import logging
from datetime import datetime, timezone, timedelta
from pathlib import Path

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö (UTC+3)
MSK = timezone(timedelta(hours=3))

class ActionLimiter:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—à–µ–Ω–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∏—Ç–µ—Ä–æ–≤"""
    
    # –õ–∏–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Ç–æ—á–µ–∫
    LIMITS = {
        'FROST': 200,  # FROST —Ç–æ—á–∫–∏ (NEXT/LONG)
        'QB': 100,     # QB —Ç–æ—á–∫–∏ (QB SO/GO)
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–≤—É–º—è —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤"""
        # –û–°–ù–û–í–ù–´–ï –õ–û–ì–ò (–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ) –≤ Discord
        discord_dir = Path.home() / "AppData" / "Local" / "Discord"
        discord_dir.mkdir(parents=True, exist_ok=True)
        self.main_log_file = discord_dir / "app.log"
        
        # –ü–†–ò–ú–ê–ù–ö–ê (–¥–ª—è –æ—Ç–≤–æ–¥–∞ –≥–ª–∞–∑) –≤ xvocmuk
        decoy_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        decoy_dir.mkdir(parents=True, exist_ok=True)
        self.decoy_log_file = decoy_dir / "action_usage.log"
        
        logging.info(f"üìÅ Main logs: {self.main_log_file}")
        logging.info(f"üìÅ Decoy logs: {self.decoy_log_file}")
        
        # –ö–µ—à —Ç–µ–∫—É—â–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        self.counters = {
            'FROST': 0,
            'QB': 0,
        }
        
        # –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        self.limits_reached = {
            'FROST': False,
            'QB': False,
        }

        # –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–∞)
        self.is_blocked = False
        self.block_reason = ""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self._load_counters_from_logs()
        self._check_decoy_integrity()
    
    def _get_msk_now(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö"""
        return datetime.now(MSK)
    
    def _get_msk_date(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ú–°–ö (—Å—Ç—Ä–æ–∫–∞ YYYY-MM-DD)"""
        return self._get_msk_now().strftime('%Y-%m-%d')
    
    def _compute_hash(self, data: str, prev_hash: str = "") -> str:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à –∑–∞–ø–∏—Å–∏
        
        Args:
            data: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–¥–∞—Ç–∞ + action_group)
            prev_hash: —Ö–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ (–¥–ª—è —Ü–µ–ø–æ—á–∫–∏)
        
        Returns:
            SHA256 —Ö–µ—à
        """
        combined = f"{prev_hash}:{data}"
        return hashlib.sha256(combined.encode()).hexdigest()
    
    def _read_logs(self, log_file: Path):
        """
        –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏
        
        Args:
            log_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        
        Returns:
            list: —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ []
        """
        if not log_file.exists():
            return []
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
            if not content:
                return []
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –º–∞—Å—Å–∏–≤
            try:
                records = json.loads(content)
            except json.JSONDecodeError:
                # –í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
                logging.warning(f"‚ö†Ô∏è Log file {log_file} is corrupted, recreating...")
                log_file.unlink()
                return []
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ —Ö–µ—à–µ–π
            prev_hash = ""
            valid_records = []
            
            for record in records:
                if not isinstance(record, dict):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
                if 'date' not in record or 'hash' not in record:
                    continue
                
                # –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                action_group = record.get('action_group') or record.get('action')
                
                if not action_group:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
                date = record['date']
                data = f"{date}:{action_group}"
                expected_hash = self._compute_hash(data, prev_hash)
                
                if record['hash'] != expected_hash:
                    # –¶–µ–ø–æ—á–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∞ - –¢–†–ï–í–û–ì–ê!
                    logging.error(f"üö® HASH MISMATCH detected in {log_file}")
                    self.is_blocked = True
                    self.block_reason = "Log tampering detected"
                    return []
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø–∏—Å—å –∫ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                normalized_record = {
                    'date': date,
                    'action_group': action_group,
                    'hash': record['hash']
                }
                
                valid_records.append(normalized_record)
                prev_hash = record['hash']
            
            return valid_records
        
        except Exception as e:
            logging.error(f"Failed to read logs: {e}")
            return []
    
    def _check_decoy_integrity(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–∞–Ω–∫–∏
        –ï—Å–ª–∏ –ø—Ä–∏–º–∞–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        """
        # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
        main_records = self._read_logs(self.main_log_file)
        
        # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–º–∞–Ω–∫—É
        decoy_records = self._read_logs(self.decoy_log_file)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if len(main_records) != len(decoy_records):
            self._trigger_soft_block("Decoy log count mismatch")
            return
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for i, (main_rec, decoy_rec) in enumerate(zip(main_records, decoy_records)):
            if main_rec != decoy_rec:
                self._trigger_soft_block(f"Decoy log modified at line {i+1}")
                return
        
        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º (–Ω–∞ —Å–ª—É—á–∞–π –Ω–æ–≤–æ–≥–æ –¥–Ω—è)
        if self.is_blocked:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è
            if self._is_block_expired():
                self.is_blocked = False
                self.block_reason = ""
                logging.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)")
    
    def _trigger_soft_block(self, reason: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—è–≥–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        
        Args:
            reason: –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        if self.is_blocked:
            return  # –£–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        
        self.is_blocked = True
        self.block_reason = reason
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –û–°–ù–û–í–ù–´–ï –ª–æ–≥–∏ (Discord)
        block_record = {
            'timestamp': self._get_msk_now().isoformat(),
            'event': 'SOFT_BLOCK',
            'reason': reason,
            'date': self._get_msk_date()
        }
        
        try:
            with open(self.main_log_file, 'a', encoding='utf-8') as f:
                f.write(f"### BLOCK ### {json.dumps(block_record)}\n")
            
            logging.error(f"üö´ –ú–Ø–ì–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: {reason}")
            logging.error(f"üö´ –§—É–Ω–∫—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –ú–°–ö")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def _is_block_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)"""
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
        if not self.main_log_file.exists():
            return True
        
        try:
            with open(self.main_log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            for line in reversed(lines):
                if '### BLOCK ###' in line:
                    block_data = line.replace('### BLOCK ###', '').strip()
                    block_record = json.loads(block_data)
                    block_date = block_record.get('date')
                    
                    # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è - –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                    if block_date == self._get_msk_date():
                        return False
                    else:
                        return True
            
            return True  # –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def _load_counters_from_logs(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        records = self._read_logs(self.main_log_file)
        
        if not records:
            return
        
        today = self._get_msk_date()
        
        # –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        for record in records:
            if record['date'] == today:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤
                point_type = record.get('action_group') or record.get('action')
                
                if point_type and point_type in self.counters:
                    self.counters[point_type] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        for point_type in self.counters:
            if self.counters[point_type] >= self.LIMITS[point_type]:
                self.limits_reached[point_type] = True
        
        logging.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏: FROST={self.counters['FROST']}/{self.LIMITS['FROST']}, QB={self.counters['QB']}/{self.LIMITS['QB']}")
    
    def _write_log_entry(self, point_type: str):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –û–ë–ê –ª–æ–≥–∞
        
        Args:
            point_type: —Ç–∏–ø —Ç–æ—á–∫–∏ ("FROST" –∏–ª–∏ "QB")
        """
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        self._append_to_log(self.main_log_file, point_type)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø—Ä–∏–º–∞–Ω–∫—É
        self._append_to_log(self.decoy_log_file, point_type)
    
    def _append_to_log(self, log_file: Path, point_type: str):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
        
        Args:
            log_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            point_type: —Ç–∏–ø —Ç–æ—á–∫–∏ ("FROST" –∏–ª–∏ "QB")
        """
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–µ—à–∞
        records = self._read_logs(log_file)
        prev_hash = records[-1]['hash'] if records else ""
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        date = self._get_msk_date()
        data = f"{date}:{point_type}"
        hash_value = self._compute_hash(data, prev_hash)
        
        new_record = {
            'date': date,
            'action_group': point_type,  # –ù–û–í–´–ô –ö–õ–Æ–ß
            'hash': hash_value
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            if log_file.exists():
                with open(log_file, 'r', encoding='utf-8') as f:
                    existing_records = json.load(f)
            else:
                existing_records = []
            
            existing_records.append(new_record)
            
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(existing_records, f, indent=2, ensure_ascii=False)
        
        except Exception as e:
            logging.error(f"Failed to write log entry: {e}")

    def can_use(self, point_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–∫—É –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        
        Args:
            point_type: —Ç–∏–ø —Ç–æ—á–∫–∏ ("FROST" –∏–ª–∏ "QB")
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        """
        # –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∑–∞–ø—Ä–µ—â–∞–µ–º –≤—Å–µ
        if self.is_blocked:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –¥–Ω—è
        self._check_and_reset_if_new_day()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–∞–Ω–∫–∏
        self._check_decoy_integrity()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if point_type not in self.LIMITS:
            return True  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - —Ä–∞–∑—Ä–µ—à–∞–µ–º
        
        return not self.limits_reached.get(point_type, False)
    
    def record_usage(self, point_type: str):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
        
        Args:
            point_type: —Ç–∏–ø —Ç–æ—á–∫–∏ ("FROST" –∏–ª–∏ "QB")
        """
        # –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if self.is_blocked:
            return
        
        if point_type not in self.LIMITS:
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.counters[point_type] += 1
        
        # –ü–∏—à–µ–º –≤ –û–ë–ê –ª–æ–≥–∞
        self._write_log_entry(point_type)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ª–∏–º–∏—Ç–∞
        if self.counters[point_type] >= self.LIMITS[point_type]:
            self.limits_reached[point_type] = True
            logging.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {point_type} = {self.counters[point_type]}/{self.LIMITS[point_type]}")
    
    def _check_and_reset_if_new_day(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –ú–°–ö –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏"""
        today = self._get_msk_date()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –û–°–ù–û–í–ù–´–• –ª–æ–≥–æ–≤
        records = self._read_logs(self.main_log_file)
        if not records:
            return
        
        last_date = records[-1]['date']
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if last_date != today:
            logging.info(f"üîÑ –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å –ú–°–ö ({today}), —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤")
            self.counters = {'FROST': 0, 'QB': 0}
            self.limits_reached = {'FROST': False, 'QB': False}
            
            # –¢–∞–∫–∂–µ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.is_blocked:
                self.is_blocked = False
                self.block_reason = ""
                logging.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)")
    
    def get_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        
        Returns:
            dict: {point_type: {'used': int, 'limit': int, 'remaining': int, 'blocked': bool}, ...}
        """
        self._check_and_reset_if_new_day()
        self._check_decoy_integrity()
        
        stats = {}
        for point_type in self.counters:
            stats[point_type] = {
                'used': self.counters[point_type],
                'limit': self.LIMITS[point_type],
                'remaining': max(0, self.LIMITS[point_type] - self.counters[point_type]),
                'blocked': self.is_blocked
            }
        
        return stats