"""
–°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—à–µ–Ω–æ–≤ —Å –¥–≤–æ–π–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∏—Ç–µ—Ä–æ–≤
"""
import hashlib
import json
import logging
from datetime import datetime, timezone, timedelta
from pathlib import Path

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö (UTC+3)
MSK = timezone(timedelta(hours=3))

class ActionLimiter:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—à–µ–Ω–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∏—Ç–µ—Ä–æ–≤"""
    
    # –õ–∏–º–∏—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º —ç–∫—à–µ–Ω–æ–≤
    LIMITS = {
        'tp': 200,  # NEXT/LONG (–æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫)
        'qb': 100,  # QBSO/QBGO (–æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫)
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ —ç–∫—à–µ–Ω–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã
    ACTION_GROUPS = {
        'tp_next': 'tp',
        'tp_long_left': 'tp',
        'tp_long_right': 'tp',
        'tp_exit': 'tp',
        'tp_to_so': 'qb',
        'tp_to_go': 'qb',
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–≤—É–º—è —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤"""
        # –û–°–ù–û–í–ù–´–ï –õ–û–ì–ò (–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ) –≤ Discord
        discord_dir = Path.home() / "AppData" / "Local" / "Discord"
        discord_dir.mkdir(parents=True, exist_ok=True)
        self.main_log_file = discord_dir / "app.log"
        
        # –ü–†–ò–ú–ê–ù–ö–ê (–¥–ª—è –æ—Ç–≤–æ–¥–∞ –≥–ª–∞–∑) –≤ xvocmuk
        decoy_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        decoy_dir.mkdir(parents=True, exist_ok=True)
        self.decoy_log_file = decoy_dir / "action_usage.log"
        
        logging.info(f"üìÅ Main logs: {self.main_log_file}")
        logging.info(f"üìÅ Decoy logs: {self.decoy_log_file}")
        
        # –ö–µ—à —Ç–µ–∫—É—â–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        self.counters = {
            'tp': 0,
            'qb': 0,
        }
        
        # –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —ç–∫—à–µ–Ω–∞)
        self.limits_reached = {
            'tp': False,
            'qb': False,
        }
        
        # –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–∞)
        self.is_blocked = False
        self.block_reason = ""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self._load_counters_from_logs()
        self._check_decoy_integrity()
    
    def _get_msk_now(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö"""
        return datetime.now(MSK)
    
    def _get_msk_date(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ú–°–ö (—Å—Ç—Ä–æ–∫–∞ YYYY-MM-DD)"""
        return self._get_msk_now().strftime('%Y-%m-%d')
    
    def _compute_hash(self, data: str, prev_hash: str = "") -> str:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à –∑–∞–ø–∏—Å–∏
        
        Args:
            data: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–¥–∞—Ç–∞ + action_group)
            prev_hash: —Ö–µ—à –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ (–¥–ª—è —Ü–µ–ø–æ—á–∫–∏)
        
        Returns:
            SHA256 —Ö–µ—à
        """
        combined = f"{prev_hash}:{data}"
        return hashlib.sha256(combined.encode()).hexdigest()
    
    def _read_logs(self, log_file: Path):
        """
        –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏
        
        Args:
            log_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        
        Returns:
            list: —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π [{date, action_group, hash}, ...]
        """
        if not log_file.exists():
            return []
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            records = []
            prev_hash = ""
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
                if line.startswith('### BLOCK ###') or line.startswith('### WARNING ###'):
                    continue
                
                try:
                    record = json.loads(line)
                    date = record.get('date')
                    action_group = record.get('action_group')
                    stored_hash = record.get('hash')
                    
                    if not all([date, action_group, stored_hash]):
                        logging.warning(f"–ù–µ–ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö: {line}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                    expected_hash = self._compute_hash(f"{date}:{action_group}", prev_hash)
                    
                    if expected_hash != stored_hash:
                        logging.error(f"‚ùå –õ–æ–≥ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω! –•–µ—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {line}")
                        # –í—Å–µ –ª–æ–≥–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏
                        break
                    
                    records.append(record)
                    prev_hash = stored_hash
                    
                except json.JSONDecodeError:
                    logging.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –ª–æ–≥–∞—Ö: {line}")
                    continue
            
            return records
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ {log_file}: {e}")
            return []
    
    def _check_decoy_integrity(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–∞–Ω–∫–∏
        –ï—Å–ª–∏ –ø—Ä–∏–º–∞–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        """
        # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
        main_records = self._read_logs(self.main_log_file)
        
        # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–º–∞–Ω–∫—É
        decoy_records = self._read_logs(self.decoy_log_file)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if len(main_records) != len(decoy_records):
            self._trigger_soft_block("Decoy log count mismatch")
            return
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for i, (main_rec, decoy_rec) in enumerate(zip(main_records, decoy_records)):
            if main_rec != decoy_rec:
                self._trigger_soft_block(f"Decoy log modified at line {i+1}")
                return
        
        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º (–Ω–∞ —Å–ª—É—á–∞–π –Ω–æ–≤–æ–≥–æ –¥–Ω—è)
        if self.is_blocked:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è
            if self._is_block_expired():
                self.is_blocked = False
                self.block_reason = ""
                logging.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)")
    
    def _trigger_soft_block(self, reason: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—è–≥–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        
        Args:
            reason: –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        if self.is_blocked:
            return  # –£–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        
        self.is_blocked = True
        self.block_reason = reason
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –û–°–ù–û–í–ù–´–ï –ª–æ–≥–∏ (Discord)
        block_record = {
            'timestamp': self._get_msk_now().isoformat(),
            'event': 'SOFT_BLOCK',
            'reason': reason,
            'date': self._get_msk_date()
        }
        
        try:
            with open(self.main_log_file, 'a', encoding='utf-8') as f:
                f.write(f"### BLOCK ### {json.dumps(block_record)}\n")
            
            logging.error(f"üö´ –ú–Ø–ì–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: {reason}")
            logging.error(f"üö´ –§—É–Ω–∫—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –ú–°–ö")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def _is_block_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)"""
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
        if not self.main_log_file.exists():
            return True
        
        try:
            with open(self.main_log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            for line in reversed(lines):
                if '### BLOCK ###' in line:
                    block_data = line.replace('### BLOCK ###', '').strip()
                    block_record = json.loads(block_data)
                    block_date = block_record.get('date')
                    
                    # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è - –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                    if block_date == self._get_msk_date():
                        return False
                    else:
                        return True
            
            return True  # –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def _load_counters_from_logs(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ –û–°–ù–û–í–ù–´–• –ª–æ–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        records = self._read_logs(self.main_log_file)
        
        if not records:
            logging.info("üìä –õ–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç—ã, —Å—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã")
            return
        
        today = self._get_msk_date()
        
        # –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        for record in records:
            if record['date'] == today:
                group = record['action_group']
                if group in self.counters:
                    self.counters[group] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ª–∏–º–∏—Ç–æ–≤
        for group in self.counters:
            if self.counters[group] >= self.LIMITS[group]:
                self.limits_reached[group] = True
        
        logging.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏: TP={self.counters['tp']}/{self.LIMITS['tp']}, QB={self.counters['qb']}/{self.LIMITS['qb']}")
    
    def _write_log_entry(self, action_group: str):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—à–µ–Ω–∞ –≤ –û–ë–ê –ª–æ–≥–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π + –ø—Ä–∏–º–∞–Ω–∫–∞)
        
        Args:
            action_group: –≥—Ä—É–ø–ø–∞ —ç–∫—à–µ–Ω–∞ ('tp' –∏–ª–∏ 'qb')
        """
        # –ß–∏—Ç–∞–µ–º –û–°–ù–û–í–ù–´–ï –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞
        records = self._read_logs(self.main_log_file)
        
        # –ë–µ—Ä–µ–º —Ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π)
        prev_hash = records[-1]['hash'] if records else ""
        
        date = self._get_msk_date()
        data = f"{date}:{action_group}"
        new_hash = self._compute_hash(data, prev_hash)
        
        record = {
            'date': date,
            'action_group': action_group,
            'hash': new_hash
        }
        
        record_line = json.dumps(record) + '\n'
        
        # –ü–∏—à–µ–º –≤ –û–°–ù–û–í–ù–´–ï –ª–æ–≥–∏ (Discord)
        try:
            with open(self.main_log_file, 'a', encoding='utf-8') as f:
                f.write(record_line)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: {e}")
        
        # –ü–∏—à–µ–º –≤ –ü–†–ò–ú–ê–ù–ö–£ (xvocmuk)
        try:
            with open(self.decoy_log_file, 'a', encoding='utf-8') as f:
                f.write(record_line)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∏–º–∞–Ω–∫—É: {e}")
    
    def can_use(self, action_id: str) -> bool:
        """
        –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—à–µ–Ω (–∏–∑ –∫–µ—à–∞)
        
        Args:
            action_id: ID —ç–∫—à–µ–Ω–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        """
        # –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò (–ü–†–ò–û–†–ò–¢–ï–¢ #1)
        if self.is_blocked:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            if not self._is_block_expired():
                logging.warning(f"üö´ –≠–∫—à–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {self.block_reason}")
                return False
            else:
                # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                self.is_blocked = False
                self.block_reason = ""
                logging.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)")
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–∞–Ω–∫–∏
        self._check_decoy_integrity()
        
        # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –æ—Ç–∫–∞–∑
        if self.is_blocked:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –ú–°–ö
        self._check_and_reset_if_new_day()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É
        group = self.ACTION_GROUPS.get(action_id)
        if not group:
            return True  # –≠–∫—à–µ–Ω –±–µ–∑ –ª–∏–º–∏—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–µ—à—É (–±—ã—Å—Ç—Ä–æ!)
        return not self.limits_reached[group]
    
    def record_usage(self, action_id: str):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—à–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ö–û–ù–¶–ï —ç–∫—à–µ–Ω–∞)
        
        Args:
            action_id: ID —ç–∫—à–µ–Ω–∞
        """
        # –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if self.is_blocked:
            return
        
        group = self.ACTION_GROUPS.get(action_id)
        if not group:
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.counters[group] += 1
        
        # –ü–∏—à–µ–º –≤ –û–ë–ê –ª–æ–≥–∞
        self._write_log_entry(group)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ª–∏–º–∏—Ç–∞
        if self.counters[group] >= self.LIMITS[group]:
            self.limits_reached[group] = True
            logging.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {group.upper()} = {self.counters[group]}/{self.LIMITS[group]}")
    
    def _check_and_reset_if_new_day(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –ú–°–ö –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏"""
        today = self._get_msk_date()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –û–°–ù–û–í–ù–´–• –ª–æ–≥–æ–≤
        records = self._read_logs(self.main_log_file)
        if not records:
            return
        
        last_date = records[-1]['date']
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if last_date != today:
            logging.info(f"üîÑ –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å –ú–°–ö ({today}), —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤")
            self.counters = {'tp': 0, 'qb': 0}
            self.limits_reached = {'tp': False, 'qb': False}
            
            # –¢–∞–∫–∂–µ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.is_blocked:
                self.is_blocked = False
                self.block_reason = ""
                logging.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)")
    
    def get_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        
        Returns:
            dict: {group: {'used': int, 'limit': int, 'remaining': int, 'blocked': bool}, ...}
        """
        self._check_and_reset_if_new_day()
        self._check_decoy_integrity()
        
        stats = {}
        for group in self.counters:
            stats[group] = {
                'used': self.counters[group],
                'limit': self.LIMITS[group],
                'remaining': max(0, self.LIMITS[group] - self.counters[group]),
                'blocked': self.is_blocked
            }
        
        return stats