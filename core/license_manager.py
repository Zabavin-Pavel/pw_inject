"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π - —Ä–∞–±–æ—Ç–∞ —Å license.ini
–û–ë–ù–û–í–õ–ï–ù–û: license.ini –≤ AppData
"""
import configparser
import logging
from pathlib import Path
import sys
from core.keygen import get_mac_address

class LicenseConfig:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º license.ini"""
    
    def __init__(self, license_file="license.ini"):
        # AppData –ø–∞–ø–∫–∞ (–≤—Å–µ–≥–¥–∞ - –∏ –¥–ª—è dev –∏ –¥–ª—è prod)
        # C:\Users\USERNAME\AppData\Local\xvocmuk\
        self.appdata_dir = Path.home() / "AppData" / "Local" / "xvocmuk"
        self.appdata_dir.mkdir(parents=True, exist_ok=True)
        
        # license.ini –í–°–ï–ì–î–ê –≤ AppData
        self.license_file = self.appdata_dir / license_file
        
        logging.info(f"üìÑ License file: {self.license_file}")
        
        self.config = configparser.ConfigParser()
        self._load()
    
    def _load(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å license.ini"""
        if not self.license_file.exists():
            logging.info("‚ö†Ô∏è license.ini not found, creating default")
            self._create_default()
        
        try:
            self.config.read(self.license_file, encoding='utf-8')
            logging.info("‚úÖ license.ini loaded")
        except Exception as e:
            logging.error(f"‚ùå Failed to load license.ini: {e}")
            self._create_default()
    
    def reload(self):
        """–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å license.ini —Å –¥–∏—Å–∫–∞ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)"""
        self._load()
        logging.info("üîÑ license.ini reloaded from disk")

    def _create_default(self):
        """–°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π license.ini"""
        self.config['License'] = {
            'hwid': get_mac_address(),
            'key': '',
            'ticket': ''
        }
        self._save()
    
    def _save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å license.ini"""
        try:
            with open(self.license_file, 'w', encoding='utf-8') as f:
                self.config.write(f)
            logging.info("‚úÖ license.ini saved")
        except Exception as e:
            logging.error(f"‚ùå Failed to save license.ini: {e}")
    
    def get_hwid(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å HWID"""
        return self.config.get('License', 'hwid', fallback='')
    
    def set_hwid(self, hwid: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HWID"""
        if 'License' not in self.config:
            self.config['License'] = {}
        self.config['License']['hwid'] = hwid
        self._save()
    
    def get_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"""
        return self.config.get('License', 'key', fallback='')
    
    def set_key(self, key: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á"""
        if 'License' not in self.config:
            self.config['License'] = {}
        self.config['License']['key'] = key
        self._save()
    
    def get_ticket(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω"""
        return self.config.get('License', 'ticket', fallback='')
    
    def set_ticket(self, ticket: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–ª–æ–Ω"""
        if 'License' not in self.config:
            self.config['License'] = {}
        self.config['License']['ticket'] = ticket
        self._save()

    def get_base_address(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π –æ—Ñ—Ñ—Å–µ—Ç char_origin –∏–∑ license.ini
        
        Returns:
            str: –æ—Ñ—Ñ—Å–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "013FCB38" (–±–µ–∑ 0x)
        """
        try:
            if not self.config.has_section('Offsets'):
                # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.config['Offsets'] = {
                    'BASE_ADRESS': '013FCB38'
                }
                self._save()
            
            base = self.config.get('Offsets', 'BASE_ADRESS', fallback='013FCB38')
            logging.info(f"üìç BASE_ADRESS loaded: {base}")
            return base
        except Exception as e:
            logging.error(f"‚ùå Failed to read BASE_ADRESS: {e}")
            return '013FCB38'  # –î–µ—Ñ–æ–ª—Ç

    def set_base_address(self, value):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –æ—Ñ—Ñ—Å–µ—Ç"""
        try:
            if not self.config.has_section('Offsets'):
                self.config.add_section('Offsets')
            
            self.config.set('Offsets', 'BASE_ADRESS', value)
            self._save()
            logging.info(f"‚úÖ BASE_ADRESS saved: {value}")
        except Exception as e:
            logging.error(f"‚ùå Failed to save BASE_ADRESS: {e}")