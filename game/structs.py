"""
–ò–≥—Ä–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏ - –û–ë–ù–û–í–õ–ï–ù–û
–î–æ–±–∞–≤–ª–µ–Ω–æ: location_id, fly_trigger
"""
from game.offsets import OFFSETS, resolve_offset
import logging


class CharBase:
    """–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
    
    def __init__(self, memory):
        self.memory = memory
        self.cache = {}
        self._previous_char_id = None  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self._update()
    
    def _update(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏"""
        # –û–¢–õ–ê–î–ö–ê
        logging.info(f"DEBUG _update: module_base={hex(self.memory.module_base)}")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        char_origin = resolve_offset(self.memory, OFFSETS["char_origin"], self.cache)
        if char_origin:
            self.cache["char_origin"] = char_origin
        
        char_base = resolve_offset(self.memory, OFFSETS["char_base"], self.cache)
        if char_base:
            self.cache["char_base"] = char_base
        
        # –ß–∏—Ç–∞–µ–º char_id –°–†–ê–ó–£ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        new_char_id = resolve_offset(self.memory, OFFSETS["char_id"], self.cache)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if self._previous_char_id is not None and new_char_id != self._previous_char_id:
            # –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–º–µ–Ω–∏–ª—Å—è! –û—á–∏—â–∞–µ–º –∫–µ—à —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
            old_id = self._previous_char_id
            logging.warning(f"üîÑ Character changed: {old_id} ‚Üí {new_char_id}")
            self._invalidate_cache()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π ID
        self._previous_char_id = new_char_id
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        self.char_id = new_char_id
        
        # –û–¢–õ–ê–î–ö–ê - –ø–æ–∫–∞–∂–µ–º —á—Ç–æ —á–∏—Ç–∞–µ—Ç—Å—è
        char_base_addr = self.cache.get("char_base", 0)
        logging.info(f"DEBUG: Trying to read from char_base={hex(char_base_addr)}")
        logging.info(f"  char_id at +0x6A8 = {new_char_id}")
        
        self.char_class = resolve_offset(self.memory, OFFSETS["char_class"], self.cache)
        logging.info(f"  char_class at +0x9D0 = {self.char_class}")
        
        self.char_name = resolve_offset(self.memory, OFFSETS["char_name"], self.cache)
        self.target_id = resolve_offset(self.memory, OFFSETS["target_id"], self.cache)
        
        # HP/MP
        self.char_hp = resolve_offset(self.memory, OFFSETS["char_hp"], self.cache)
        self.char_max_hp = resolve_offset(self.memory, OFFSETS["char_max_hp"], self.cache)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        self.char_pos_x = resolve_offset(self.memory, OFFSETS["char_pos_x"], self.cache)
        self.char_pos_y = resolve_offset(self.memory, OFFSETS["char_pos_y"], self.cache)
        self.char_pos_z = resolve_offset(self.memory, OFFSETS["char_pos_z"], self.cache)
        
        # –ü–æ–ª–µ—Ç
        self.fly_speed = resolve_offset(self.memory, OFFSETS["fly_speed"], self.cache)
        self.fly_speed_z = resolve_offset(self.memory, OFFSETS["fly_speed_z"], self.cache)
        self.fly_status = resolve_offset(self.memory, OFFSETS["fly_status"], self.cache)
        
        # –ù–û–í–û–ï: Location ID
        self.location_id = resolve_offset(self.memory, OFFSETS["location_id"], self.cache)
    
    def _invalidate_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —É–∫–∞–∑–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤)"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ (–æ–Ω–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
        char_origin = self.cache.get("char_origin")
        char_base = self.cache.get("char_base")
        
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à
        self.cache.clear()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        if char_origin:
            self.cache["char_origin"] = char_origin
        if char_base:
            self.cache["char_base"] = char_base
        
        logging.info("üîÑ CharBase cache invalidated (character changed)")
    
    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return self.char_id is not None and self.char_id != 0
    
    def get_position(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y, z)"""
        self._update()
        return (self.char_pos_x, self.char_pos_y, self.char_pos_z)
    
    def set_position(self, x, y, z):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫ - –±—ã—Å—Ç—Ä–æ)"""
        if "char_base" not in self.cache:
            self._update()
        
        if "char_base" not in self.cache:
            return False
        
        char_base = self.cache["char_base"]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        self.memory.write_float(char_base + 0xA00, x)  # X
        self.memory.write_float(char_base + 0x9F8, y)  # Y
        self.memory.write_float(char_base + 0x9FC, z)  # Z
        
        return True
    
    def get_target_position(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–∞—Ä–≥–µ—Ç–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º target_id
        self.target_id = resolve_offset(self.memory, OFFSETS["target_id"], self.cache)
        
        if not self.target_id or self.target_id == 0:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º selection_origin
        selection_origin = resolve_offset(self.memory, OFFSETS["selection_origin"], self.cache)
        if selection_origin:
            self.cache["selection_origin"] = selection_origin
        
        # –ü–æ–ª—É—á–∞–µ–º selection_ptr
        selection_ptr = resolve_offset(self.memory, OFFSETS["selection_ptr"], self.cache)
        if not selection_ptr:
            return None
        
        self.cache["selection_ptr"] = selection_ptr
        
        # –ü–æ–ª—É—á–∞–µ–º target_ptr
        target_ptr = resolve_offset(self.memory, OFFSETS["target_ptr"], self.cache)
        if not target_ptr:
            return None
        
        self.cache["target_ptr"] = target_ptr
        
        # –ß–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        x = resolve_offset(self.memory, OFFSETS["target_pos_x"], self.cache)
        y = resolve_offset(self.memory, OFFSETS["target_pos_y"], self.cache)
        z = resolve_offset(self.memory, OFFSETS["target_pos_z"], self.cache)
        
        if x is None or y is None or z is None:
            return None
        
        return (x, y, z)
    
    def refresh(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        self._update()
    
    def set_target_id(self, target_id):
        """–ó–∞–ø–∏—Å–∞—Ç—å target_id (–¥–ª—è Attack)"""
        if "char_base" not in self.cache:
            self._update()
        
        if "char_base" not in self.cache:
            return False
        
        char_base = self.cache["char_base"]
        return self.memory.write_uint(char_base + 0x7B4, target_id)
    
    def set_fly_speed_z(self, value):
        """–ó–∞–ø–∏—Å–∞—Ç—å fly_speed_z (–¥–ª—è Follow)"""
        if "char_base" not in self.cache:
            self._update()
        
        if "char_base" not in self.cache:
            return False
        
        char_base = self.cache["char_base"]
        return self.memory.write_float(char_base + 0x12A8, value)


class WorldManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Ä–æ–º (–ª—É—Ç, –∏–≥—Ä–æ–∫–∏, NPC)"""
    
    def __init__(self, memory):
        self.memory = memory
        self.cache = {}
        self._update_base()
    
    def _update_base(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞"""
        world_origin = resolve_offset(self.memory, OFFSETS["world_origin"], self.cache)
        if world_origin:
            self.cache["world_origin"] = world_origin
        
        world_base = resolve_offset(self.memory, OFFSETS["world_base"], self.cache)
        if world_base:
            self.cache["world_base"] = world_base
    
    def has_any_loot(self):
        """
        –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ª—É—Ç (–ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é)
        
        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –ª—É—Ç–∞
        """
        loot_count = resolve_offset(self.memory, OFFSETS["loot_count"], self.cache)
        return loot_count is not None and loot_count > 0
    
    def get_loot_nearby(self, char_position, max_distance):
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª—É—Ç –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        
        Args:
            char_position: (x, y, z) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            max_distance: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
        
        Returns:
            list: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ª—É—Ç–∞ [{x, y}, ...]
        """
        import math
        
        loot_items = resolve_offset(self.memory, OFFSETS["loot_items"], self.cache)
        
        if not loot_items:
            return []
        
        char_x, char_y, char_z = char_position
        nearby = []
        
        for item in loot_items:
            item_x = item.get('x')
            item_y = item.get('y')
            
            if item_x is None or item_y is None:
                continue
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ 2D (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º Z)
            distance = math.sqrt((item_x - char_x)**2 + (item_y - char_y)**2)
            
            if distance <= max_distance:
                nearby.append(item)
        
        return nearby